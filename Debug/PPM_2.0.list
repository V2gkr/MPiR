
PPM_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f8  080069f8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200000a4  08006aa4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006aa4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014604  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0f  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000373e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000384a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018838  00000000  00000000  00039428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016532  00000000  00000000  00051c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a88  00000000  00000000  00068192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000f9c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067c0 	.word	0x080067c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080067c0 	.word	0x080067c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ADS_Config>:


/* @brief: configures ADS1115 how we need
 * ADDRESS and CHANNEL isn't used in configuration and needed only to get channel
 * and to get data from channel what we need */
void ADS_Config(ADS1115_InitTypeDef*ADS1115_InitStruct){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	ADS1115_InitStruct->COMP_LAT 	= 	ADS1115_COMP_LAT_0;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	81da      	strh	r2, [r3, #14]
	ADS1115_InitStruct->COMP_MODE 	= 	ADS1115_COMP_MODE_0;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	815a      	strh	r2, [r3, #10]
	ADS1115_InitStruct->COMP_POL 	= 	ADS1115_COMP_POL_0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	819a      	strh	r2, [r3, #12]
	ADS1115_InitStruct->DataRate 	= 	ADS1115_DataRate_475;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	22c0      	movs	r2, #192	; 0xc0
 80005a2:	811a      	strh	r2, [r3, #8]
	ADS1115_InitStruct->MODE 		= 	ADS1115_MODE_ContinuConver;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	80da      	strh	r2, [r3, #6]
	//ADS1115_InitStruct->MUX 		= 	ADS1115_MUX_Channel_0;
	ADS1115_InitStruct->OS 			= 	ADS1115_OS_SingleConverStart;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b0:	801a      	strh	r2, [r3, #0]
	//ADS1115_InitStruct->PGA 		= 	ADS1115_PGA_4096;
	ADS1115_InitStruct->ADDRESS 	=	ADS1115_ADDRESS_GND;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2290      	movs	r2, #144	; 0x90
 80005b6:	829a      	strh	r2, [r3, #20]
	//ADS1115_InitStruct->CHANNEL 	= 	ADS1115_CHANNEL0;

	//some objects are in a comments , because they are changeable throughout the project
	uint16_t Config;
	uint8_t Writebuff[3];
	Config = ADS1115_InitStruct->OS + ADS1115_InitStruct->MUX + ADS1115_InitStruct->PGA + ADS1115_InitStruct->MODE + ADS1115_InitStruct->DataRate + ADS1115_InitStruct->COMP_MODE + ADS1115_InitStruct->COMP_POL + ADS1115_InitStruct->COMP_LAT + ADS1115_InitStruct->COMP_QUE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	881a      	ldrh	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	885b      	ldrh	r3, [r3, #2]
 80005c0:	4413      	add	r3, r2
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	88db      	ldrh	r3, [r3, #6]
 80005d0:	4413      	add	r3, r2
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	891b      	ldrh	r3, [r3, #8]
 80005d8:	4413      	add	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	895b      	ldrh	r3, [r3, #10]
 80005e0:	4413      	add	r3, r2
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	899b      	ldrh	r3, [r3, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	89db      	ldrh	r3, [r3, #14]
 80005f0:	4413      	add	r3, r2
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	8a1b      	ldrh	r3, [r3, #16]
 80005f8:	4413      	add	r3, r2
 80005fa:	81fb      	strh	r3, [r7, #14]
	Writebuff[0] = ADS1115_Pointer_ConfigReg;
 80005fc:	2301      	movs	r3, #1
 80005fe:	723b      	strb	r3, [r7, #8]
	Writebuff[1] = (unsigned char) ((Config >> 8) & 0xFF);
 8000600:	89fb      	ldrh	r3, [r7, #14]
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	b29b      	uxth	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	727b      	strb	r3, [r7, #9]
	Writebuff[2] = (unsigned char) (Config & 0xFF);
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_InitStruct->ADDRESS|ADS1115_ADDRESS_W, Writebuff, 3,100);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	8a99      	ldrh	r1, [r3, #20]
 8000614:	f107 0208 	add.w	r2, r7, #8
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2303      	movs	r3, #3
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <ADS_Config+0xa8>)
 8000620:	f002 fc18 	bl	8002e54 <HAL_I2C_Master_Transmit>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000cc 	.word	0x200000cc

08000630 <ADS1115_ReadRawData>:

/* @brief: gets data like 2 8bit values and connect them in 1 16 bit value */
void ADS1115_ReadRawData(ADS1115_InitTypeDef *ADS1115_InitStruct){
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
	unsigned char Result[2];
	uint8_t Writebuff[1];
	Writebuff[0] = ADS1115_Pointer_ConverReg;
 8000638:	2300      	movs	r3, #0
 800063a:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c1, ADS1115_InitStruct->ADDRESS, Writebuff, 3,100);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	8a99      	ldrh	r1, [r3, #20]
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2303      	movs	r3, #3
 800064a:	4812      	ldr	r0, [pc, #72]	; (8000694 <ADS1115_ReadRawData+0x64>)
 800064c:	f002 fc02 	bl	8002e54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADS1115_InitStruct->ADDRESS , Result, 2, 100);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	8a99      	ldrh	r1, [r3, #20]
 8000654:	f107 020c 	add.w	r2, r7, #12
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2302      	movs	r3, #2
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <ADS1115_ReadRawData+0x64>)
 8000660:	f002 fcf6 	bl	8003050 <HAL_I2C_Master_Receive>
	ADS1115_InitStruct->ADS1115_RawData[ADS1115_InitStruct->CHANNEL] = (int16_t)(((Result[0] << 8) & 0xFF00) | (Result[1] & 0xFF));
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21b      	sxth	r3, r3
 800066a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800066e:	b21a      	sxth	r2, r3
 8000670:	7b7b      	ldrb	r3, [r7, #13]
 8000672:	b21b      	sxth	r3, r3
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	7c89      	ldrb	r1, [r1, #18]
 8000678:	4608      	mov	r0, r1
 800067a:	4313      	orrs	r3, r2
 800067c:	b219      	sxth	r1, r3
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	f100 0308 	add.w	r3, r0, #8
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	460a      	mov	r2, r1
 800068a:	80da      	strh	r2, [r3, #6]
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000cc 	.word	0x200000cc

08000698 <LCD_Send_Command>:
#include "LCD_I2C.h"
#include "stm32f4xx_hal.h"
#include "i2c.h"

void LCD_Send_Command (uint8_t cmd ,LCD_InitTypeDef * LCD_InitStruct)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[4];
	data_t[0] = (cmd&0xf0)|EN_PIN|LCD_InitStruct->bl_pin;  //en=1, rs=0
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	733b      	strb	r3, [r7, #12]
	data_t[1] = (cmd&0xf0)|LCD_InitStruct->bl_pin;  //en=0, rs=0
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	737b      	strb	r3, [r7, #13]
	data_t[2] = cmd<<4|LCD_InitStruct->en_pin|LCD_InitStruct->bl_pin;  //en=1, rs=0
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b25a      	sxtb	r2, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	799b      	ldrb	r3, [r3, #6]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73bb      	strb	r3, [r7, #14]
	data_t[3] = cmd<<4|LCD_InitStruct->bl_pin;  //en=0, rs=0
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	799b      	ldrb	r3, [r3, #6]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_InitStruct->addr,(uint8_t *) data_t, 4,100);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b299      	uxth	r1, r3
 800070c:	f107 020c 	add.w	r2, r7, #12
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2304      	movs	r3, #4
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <LCD_Send_Command+0x94>)
 8000718:	f002 fb9c 	bl	8002e54 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800071c:	2005      	movs	r0, #5
 800071e:	f001 fb67 	bl	8001df0 <HAL_Delay>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000cc 	.word	0x200000cc

08000730 <LCD_Send_Data>:
void LCD_Send_Data (uint8_t cmd ,LCD_InitTypeDef * LCD_InitStruct)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af02      	add	r7, sp, #8
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]

	uint8_t data_t[4];
	data_t[0] = (cmd&0xf0)|EN_PIN|LCD_InitStruct->bl_pin|LCD_InitStruct->rs_pin;  //en=1, rs=0
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f023 030f 	bic.w	r3, r3, #15
 8000742:	b2da      	uxtb	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	799b      	ldrb	r3, [r3, #6]
 8000748:	4313      	orrs	r3, r2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	78db      	ldrb	r3, [r3, #3]
 8000750:	4313      	orrs	r3, r2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	b2db      	uxtb	r3, r3
 800075a:	733b      	strb	r3, [r7, #12]
	data_t[1] = (cmd&0xf0)|LCD_InitStruct->bl_pin|LCD_InitStruct->rs_pin;  //en=0, rs=0
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	f023 030f 	bic.w	r3, r3, #15
 8000764:	b25a      	sxtb	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	b25a      	sxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	b2db      	uxtb	r3, r3
 800077c:	737b      	strb	r3, [r7, #13]
	data_t[2] = cmd<<4|LCD_InitStruct->en_pin|LCD_InitStruct->bl_pin|LCD_InitStruct->rs_pin;  //en=1, rs=0
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	b25a      	sxtb	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	b25b      	sxtb	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b25a      	sxtb	r2, r3
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	799b      	ldrb	r3, [r3, #6]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b25a      	sxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	78db      	ldrb	r3, [r3, #3]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	73bb      	strb	r3, [r7, #14]
	data_t[3] = cmd<<4|LCD_InitStruct->bl_pin|LCD_InitStruct->rs_pin;  //en=0, rs=0
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b25a      	sxtb	r2, r3
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_InitStruct->addr,(uint8_t *) data_t, 4,100);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b299      	uxth	r1, r3
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2304      	movs	r3, #4
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <LCD_Send_Data+0xb8>)
 80007d6:	f002 fb3d 	bl	8002e54 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80007da:	2005      	movs	r0, #5
 80007dc:	f001 fb08 	bl	8001df0 <HAL_Delay>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000cc 	.word	0x200000cc

080007ec <LCD_Clear>:

void LCD_Clear (LCD_InitTypeDef * LCD_InitStruct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	LCD_Send_Command(CLEAR_LCD,LCD_InitStruct);
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff4e 	bl	8000698 <LCD_Send_Command>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col,LCD_InitTypeDef * LCD_InitStruct)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	603a      	str	r2, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	460b      	mov	r3, r1
 8000812:	71bb      	strb	r3, [r7, #6]

    switch (row)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d81e      	bhi.n	8000858 <LCD_Set_Cursor+0x54>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <LCD_Set_Cursor+0x1c>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000831 	.word	0x08000831
 8000824:	0800083b 	.word	0x0800083b
 8000828:	08000845 	.word	0x08000845
 800082c:	0800084f 	.word	0x0800084f
    {
        case 0:
            col |= 0x80;
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000836:	71bb      	strb	r3, [r7, #6]
            break;
 8000838:	e00e      	b.n	8000858 <LCD_Set_Cursor+0x54>
        case 1:
            col |= 0x80|0x40;
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000840:	71bb      	strb	r3, [r7, #6]
            break;
 8000842:	e009      	b.n	8000858 <LCD_Set_Cursor+0x54>
        case 2:
            col |= 0x80|0x14;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	f063 036b 	orn	r3, r3, #107	; 0x6b
 800084a:	71bb      	strb	r3, [r7, #6]
            break;
 800084c:	e004      	b.n	8000858 <LCD_Set_Cursor+0x54>
        case 3:
            col |= 0xC0|0x54;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f063 032b 	orn	r3, r3, #43	; 0x2b
 8000854:	71bb      	strb	r3, [r7, #6]
            break;
 8000856:	bf00      	nop
    }// rows - от 1 до 3 - выбор ряда дисплея , cols - смотреть в даташите и отдавать шестнадцатеричные адреса

    LCD_Send_Command (col, LCD_InitStruct);
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	6839      	ldr	r1, [r7, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff1b 	bl	8000698 <LCD_Send_Command>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop

0800086c <LCD_Init>:


void LCD_Init (LCD_InitTypeDef * LCD_InitStruct){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

	LCD_InitStruct->addr=0x27<<1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	224e      	movs	r2, #78	; 0x4e
 8000878:	701a      	strb	r2, [r3, #0]
	LCD_InitStruct->bl_pin=BL_PIN;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2208      	movs	r2, #8
 800087e:	719a      	strb	r2, [r3, #6]
	LCD_InitStruct->en_pin=EN_PIN;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2204      	movs	r2, #4
 8000884:	715a      	strb	r2, [r3, #5]
	LCD_InitStruct->rs_pin=RS_PIN;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	70da      	strb	r2, [r3, #3]
	LCD_InitStruct->rw_pin=RW_PIN;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2202      	movs	r2, #2
 8000890:	711a      	strb	r2, [r3, #4]
	// initialisation
	HAL_Delay(40);  // wait for >40ms
 8000892:	2028      	movs	r0, #40	; 0x28
 8000894:	f001 faac 	bl	8001df0 <HAL_Delay>
	LCD_Send_Command (INIT_8_BIT_MODE,LCD_InitStruct);
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	2003      	movs	r0, #3
 800089c:	f7ff fefc 	bl	8000698 <LCD_Send_Command>
	HAL_Delay(5);  // wait for >4.1ms
 80008a0:	2005      	movs	r0, #5
 80008a2:	f001 faa5 	bl	8001df0 <HAL_Delay>
	LCD_Send_Command (INIT_8_BIT_MODE,LCD_InitStruct);
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	2003      	movs	r0, #3
 80008aa:	f7ff fef5 	bl	8000698 <LCD_Send_Command>
	HAL_Delay(1);  // wait for >100us
 80008ae:	2001      	movs	r0, #1
 80008b0:	f001 fa9e 	bl	8001df0 <HAL_Delay>
	LCD_Send_Command (INIT_8_BIT_MODE,LCD_InitStruct);
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	2003      	movs	r0, #3
 80008b8:	f7ff feee 	bl	8000698 <LCD_Send_Command>
	//4 bit initialisation
	LCD_Send_Command (INIT_4_BIT_MODE,LCD_InitStruct);
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	2002      	movs	r0, #2
 80008c0:	f7ff feea 	bl	8000698 <LCD_Send_Command>

	LCD_Send_Command (UNDERLINE_OFF_BLINK_OFF,LCD_InitStruct); //disp on/off
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	200c      	movs	r0, #12
 80008c8:	f7ff fee6 	bl	8000698 <LCD_Send_Command>
	HAL_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f001 fa8f 	bl	8001df0 <HAL_Delay>
	LCD_Clear(LCD_InitStruct);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ff8a 	bl	80007ec <LCD_Clear>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <LCD_Print>:

void LCD_Print (char *data ,LCD_InitTypeDef * LCD_InitStruct)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]

	while(*data)
 80008ea:	e007      	b.n	80008fc <LCD_Print+0x1c>
		{

			LCD_Send_Data (*data++,LCD_InitStruct);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	6839      	ldr	r1, [r7, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff1a 	bl	8000730 <LCD_Send_Data>
	while(*data)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f3      	bne.n	80008ec <LCD_Print+0xc>
		}
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <UART_Service_stp_config_Private>:
					comp_stp[3]="stp",
					comp_msr[3]="msr",
					comp_ret[3]="ret";

//private function for just not to copy a lot of the same functions
void UART_Service_stp_config_Private(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, Tx_fb_stop, FeedbackDataLen);
 8000914:	220e      	movs	r2, #14
 8000916:	490a      	ldr	r1, [pc, #40]	; (8000940 <UART_Service_stp_config_Private+0x30>)
 8000918:	480a      	ldr	r0, [pc, #40]	; (8000944 <UART_Service_stp_config_Private+0x34>)
 800091a:	f004 f879 	bl	8004a10 <HAL_UART_Transmit_DMA>
	PR_INZ_Stop();
 800091e:	f000 f983 	bl	8000c28 <PR_INZ_Stop>
	PRINZ1.type_of_task=END_OF_TASK;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <UART_Service_stp_config_Private+0x38>)
 8000924:	2205      	movs	r2, #5
 8000926:	721a      	strb	r2, [r3, #8]
	LCD_Set_Cursor(1, 12, &LCD1);
 8000928:	4a08      	ldr	r2, [pc, #32]	; (800094c <UART_Service_stp_config_Private+0x3c>)
 800092a:	210c      	movs	r1, #12
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff ff69 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(Rx_data, &LCD1);
 8000932:	4906      	ldr	r1, [pc, #24]	; (800094c <UART_Service_stp_config_Private+0x3c>)
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <UART_Service_stp_config_Private+0x40>)
 8000936:	f7ff ffd3 	bl	80008e0 <LCD_Print>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800683c 	.word	0x0800683c
 8000944:	200001d8 	.word	0x200001d8
 8000948:	20000148 	.word	0x20000148
 800094c:	20000140 	.word	0x20000140
 8000950:	200000c0 	.word	0x200000c0

08000954 <UART_Service_ret_config_Private>:
void UART_Service_ret_config_Private(){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, Tx_fb_Returning, FeedbackDataLen);
 8000958:	220e      	movs	r2, #14
 800095a:	4909      	ldr	r1, [pc, #36]	; (8000980 <UART_Service_ret_config_Private+0x2c>)
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <UART_Service_ret_config_Private+0x30>)
 800095e:	f004 f857 	bl	8004a10 <HAL_UART_Transmit_DMA>
	PRINZ1.type_of_task=RETURNING;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <UART_Service_ret_config_Private+0x34>)
 8000964:	2204      	movs	r2, #4
 8000966:	721a      	strb	r2, [r3, #8]
	LCD_Set_Cursor(1, 12, &LCD1);
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <UART_Service_ret_config_Private+0x38>)
 800096a:	210c      	movs	r1, #12
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff ff49 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(Rx_data, &LCD1);
 8000972:	4906      	ldr	r1, [pc, #24]	; (800098c <UART_Service_ret_config_Private+0x38>)
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <UART_Service_ret_config_Private+0x3c>)
 8000976:	f7ff ffb3 	bl	80008e0 <LCD_Print>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800687c 	.word	0x0800687c
 8000984:	200001d8 	.word	0x200001d8
 8000988:	20000148 	.word	0x20000148
 800098c:	20000140 	.word	0x20000140
 8000990:	200000c0 	.word	0x200000c0

08000994 <UART_Service_sta_config_Private>:

void UART_Service_sta_config_Private(){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, Tx_fb_move, FeedbackDataLen);
 8000998:	220e      	movs	r2, #14
 800099a:	4911      	ldr	r1, [pc, #68]	; (80009e0 <UART_Service_sta_config_Private+0x4c>)
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <UART_Service_sta_config_Private+0x50>)
 800099e:	f004 f837 	bl	8004a10 <HAL_UART_Transmit_DMA>
	PRINZ1.type_of_task=MOVING_ONLY;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <UART_Service_sta_config_Private+0x54>)
 80009a4:	2203      	movs	r2, #3
 80009a6:	721a      	strb	r2, [r3, #8]
	PRINZ1.flag_dir=ucUART_1byteflag;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <UART_Service_sta_config_Private+0x58>)
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <UART_Service_sta_config_Private+0x54>)
 80009ae:	701a      	strb	r2, [r3, #0]
	if(PRINZ1.flag_dir) PRINZ1.count=0;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <UART_Service_sta_config_Private+0x54>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <UART_Service_sta_config_Private+0x2c>
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <UART_Service_sta_config_Private+0x54>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	725a      	strb	r2, [r3, #9]
 80009be:	e002      	b.n	80009c6 <UART_Service_sta_config_Private+0x32>
	else PRINZ1.count=COUNT_MAX-1;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <UART_Service_sta_config_Private+0x54>)
 80009c2:	2231      	movs	r2, #49	; 0x31
 80009c4:	725a      	strb	r2, [r3, #9]
	PR_INZ_Start();
 80009c6:	f000 f907 	bl	8000bd8 <PR_INZ_Start>
	LCD_Set_Cursor(1, 12, &LCD1);
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <UART_Service_sta_config_Private+0x5c>)
 80009cc:	210c      	movs	r1, #12
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff ff18 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(Rx_data, &LCD1);
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <UART_Service_sta_config_Private+0x5c>)
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <UART_Service_sta_config_Private+0x60>)
 80009d8:	f7ff ff82 	bl	80008e0 <LCD_Print>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	0800682c 	.word	0x0800682c
 80009e4:	200001d8 	.word	0x200001d8
 80009e8:	20000148 	.word	0x20000148
 80009ec:	200000c7 	.word	0x200000c7
 80009f0:	20000140 	.word	0x20000140
 80009f4:	200000c0 	.word	0x200000c0

080009f8 <UART_Service_mov_config_Private>:

void UART_Service_mov_config_Private(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, Tx_fb_SingleShot, FeedbackDataLen);
 80009fc:	220e      	movs	r2, #14
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <UART_Service_mov_config_Private+0x3c>)
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <UART_Service_mov_config_Private+0x40>)
 8000a02:	f004 f805 	bl	8004a10 <HAL_UART_Transmit_DMA>
	PRINZ1.flag_dir=ucUART_1byteflag;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <UART_Service_mov_config_Private+0x44>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <UART_Service_mov_config_Private+0x48>)
 8000a0c:	701a      	strb	r2, [r3, #0]
	PR_INZ_Move_Both(ucUART_Number);
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <UART_Service_mov_config_Private+0x4c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f9fe 	bl	8000e14 <PR_INZ_Move_Both>
	LCD_Set_Cursor(1, 12, &LCD1);
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <UART_Service_mov_config_Private+0x50>)
 8000a1a:	210c      	movs	r1, #12
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fef1 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(Rx_data, &LCD1);
 8000a22:	4909      	ldr	r1, [pc, #36]	; (8000a48 <UART_Service_mov_config_Private+0x50>)
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <UART_Service_mov_config_Private+0x54>)
 8000a26:	f7ff ff5b 	bl	80008e0 <LCD_Print>
	PRINZ1.type_of_task=STANDBY;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <UART_Service_mov_config_Private+0x48>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	721a      	strb	r2, [r3, #8]
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0800685c 	.word	0x0800685c
 8000a38:	200001d8 	.word	0x200001d8
 8000a3c:	200000c7 	.word	0x200000c7
 8000a40:	20000148 	.word	0x20000148
 8000a44:	200000c8 	.word	0x200000c8
 8000a48:	20000140 	.word	0x20000140
 8000a4c:	200000c0 	.word	0x200000c0

08000a50 <UART_Service_msr_config_Private>:

void UART_Service_msr_config_Private(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2, Tx_fb_measure, FeedbackDataLen);
 8000a54:	220e      	movs	r2, #14
 8000a56:	4904      	ldr	r1, [pc, #16]	; (8000a68 <UART_Service_msr_config_Private+0x18>)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <UART_Service_msr_config_Private+0x1c>)
 8000a5a:	f003 ffd9 	bl	8004a10 <HAL_UART_Transmit_DMA>
	PRINZ1.type_of_task=MEASUREMENT_ONLY;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <UART_Service_msr_config_Private+0x20>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	721a      	strb	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	0800684c 	.word	0x0800684c
 8000a6c:	200001d8 	.word	0x200001d8
 8000a70:	20000148 	.word	0x20000148

08000a74 <UART_Command_Error_Handler_Private>:

/* @brief: function just to send error message if user sends smth wrong*/
void UART_Command_Error_Handler_Private(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart2,Tx_fb_Error_Handler, FeedbackDataLen);
 8000a78:	220e      	movs	r2, #14
 8000a7a:	4907      	ldr	r1, [pc, #28]	; (8000a98 <UART_Command_Error_Handler_Private+0x24>)
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <UART_Command_Error_Handler_Private+0x28>)
 8000a7e:	f003 ffc7 	bl	8004a10 <HAL_UART_Transmit_DMA>
	LCD_Set_Cursor(1, 12, &LCD1);
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <UART_Command_Error_Handler_Private+0x2c>)
 8000a84:	210c      	movs	r1, #12
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff febc 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(Rx_data, &LCD1);
 8000a8c:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <UART_Command_Error_Handler_Private+0x2c>)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <UART_Command_Error_Handler_Private+0x30>)
 8000a90:	f7ff ff26 	bl	80008e0 <LCD_Print>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	0800686c 	.word	0x0800686c
 8000a9c:	200001d8 	.word	0x200001d8
 8000aa0:	20000140 	.word	0x20000140
 8000aa4:	200000c0 	.word	0x200000c0

08000aa8 <UART_Service>:

/* @brief: function for processing all that messages from PC*/
void UART_Service(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	Receive_Callback_Flag=0;
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <UART_Service+0xdc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
	memcpy(Act_data,Rx_data+1,sizeof(Act_data));
 8000ab2:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <UART_Service+0xe0>)
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <UART_Service+0xe4>)
 8000ab6:	8811      	ldrh	r1, [r2, #0]
 8000ab8:	7892      	ldrb	r2, [r2, #2]
 8000aba:	8019      	strh	r1, [r3, #0]
 8000abc:	709a      	strb	r2, [r3, #2]
	ucUART_1byteflag=atoi(&Rx_data[0]);
 8000abe:	4834      	ldr	r0, [pc, #208]	; (8000b90 <UART_Service+0xe8>)
 8000ac0:	f005 f93e 	bl	8005d40 <atoi>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <UART_Service+0xec>)
 8000aca:	701a      	strb	r2, [r3, #0]
	ucUART_Number=atoi((char*)Act_data);
 8000acc:	482f      	ldr	r0, [pc, #188]	; (8000b8c <UART_Service+0xe4>)
 8000ace:	f005 f937 	bl	8005d40 <atoi>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <UART_Service+0xf0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	if(ucUART_1byteflag==1 || ucUART_1byteflag==0){
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <UART_Service+0xec>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d003      	beq.n	8000aea <UART_Service+0x42>
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <UART_Service+0xec>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d135      	bne.n	8000b56 <UART_Service+0xae>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000aea:	2203      	movs	r2, #3
 8000aec:	492b      	ldr	r1, [pc, #172]	; (8000b9c <UART_Service+0xf4>)
 8000aee:	4827      	ldr	r0, [pc, #156]	; (8000b8c <UART_Service+0xe4>)
 8000af0:	f005 f954 	bl	8005d9c <memcmp>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <UART_Service+0x58>
 8000afa:	f7ff ff4b 	bl	8000994 <UART_Service_sta_config_Private>
 8000afe:	e03f      	b.n	8000b80 <UART_Service+0xd8>
		else if(!memcmp(Act_data,comp_msr,sizeof(Act_data))) 	UART_Service_msr_config_Private();
 8000b00:	2203      	movs	r2, #3
 8000b02:	4927      	ldr	r1, [pc, #156]	; (8000ba0 <UART_Service+0xf8>)
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <UART_Service+0xe4>)
 8000b06:	f005 f949 	bl	8005d9c <memcmp>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <UART_Service+0x6e>
 8000b10:	f7ff ff9e 	bl	8000a50 <UART_Service_msr_config_Private>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000b14:	e034      	b.n	8000b80 <UART_Service+0xd8>
		else if(ucUART_Number)									UART_Service_mov_config_Private();
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <UART_Service+0xf0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <UART_Service+0x7c>
 8000b1e:	f7ff ff6b 	bl	80009f8 <UART_Service_mov_config_Private>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000b22:	e02d      	b.n	8000b80 <UART_Service+0xd8>
		else if(!memcmp(Act_data,comp_stp,sizeof(Act_data)))	UART_Service_stp_config_Private();
 8000b24:	2203      	movs	r2, #3
 8000b26:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <UART_Service+0xfc>)
 8000b28:	4818      	ldr	r0, [pc, #96]	; (8000b8c <UART_Service+0xe4>)
 8000b2a:	f005 f937 	bl	8005d9c <memcmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <UART_Service+0x92>
 8000b34:	f7ff feec 	bl	8000910 <UART_Service_stp_config_Private>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000b38:	e022      	b.n	8000b80 <UART_Service+0xd8>
		else if(!memcmp(Act_data,comp_ret,sizeof(Act_data)))	UART_Service_ret_config_Private();
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <UART_Service+0x100>)
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <UART_Service+0xe4>)
 8000b40:	f005 f92c 	bl	8005d9c <memcmp>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <UART_Service+0xa8>
 8000b4a:	f7ff ff03 	bl	8000954 <UART_Service_ret_config_Private>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000b4e:	e017      	b.n	8000b80 <UART_Service+0xd8>
		else UART_Command_Error_Handler_Private();
 8000b50:	f7ff ff90 	bl	8000a74 <UART_Command_Error_Handler_Private>
		if(!memcmp(Act_data,comp_sta,sizeof(Act_data))) 		UART_Service_sta_config_Private();
 8000b54:	e014      	b.n	8000b80 <UART_Service+0xd8>
	}
	else if(ucUART_1byteflag==2){
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <UART_Service+0xec>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d10d      	bne.n	8000b7a <UART_Service+0xd2>
		if(!memcmp(Act_data,comp_msr,sizeof(Act_data))) 	UART_Service_msr_config_Private();
 8000b5e:	2203      	movs	r2, #3
 8000b60:	490f      	ldr	r1, [pc, #60]	; (8000ba0 <UART_Service+0xf8>)
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <UART_Service+0xe4>)
 8000b64:	f005 f91a 	bl	8005d9c <memcmp>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <UART_Service+0xcc>
 8000b6e:	f7ff ff6f 	bl	8000a50 <UART_Service_msr_config_Private>
		else UART_Command_Error_Handler_Private();
	}
	else UART_Command_Error_Handler_Private();

}
 8000b72:	e005      	b.n	8000b80 <UART_Service+0xd8>
		else UART_Command_Error_Handler_Private();
 8000b74:	f7ff ff7e 	bl	8000a74 <UART_Command_Error_Handler_Private>
}
 8000b78:	e002      	b.n	8000b80 <UART_Service+0xd8>
	else UART_Command_Error_Handler_Private();
 8000b7a:	f7ff ff7b 	bl	8000a74 <UART_Command_Error_Handler_Private>
}
 8000b7e:	e7ff      	b.n	8000b80 <UART_Service+0xd8>
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000c9 	.word	0x200000c9
 8000b88:	200000c1 	.word	0x200000c1
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	200000c0 	.word	0x200000c0
 8000b94:	200000c7 	.word	0x200000c7
 8000b98:	200000c8 	.word	0x200000c8
 8000b9c:	0800688c 	.word	0x0800688c
 8000ba0:	08006894 	.word	0x08006894
 8000ba4:	08006890 	.word	0x08006890
 8000ba8:	08006898 	.word	0x08006898

08000bac <HAL_UART_RxCpltCallback>:
/* @brief: callback function in IRQ*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	Receive_Callback_Flag=1;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_UART_RxCpltCallback+0x20>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2,(uint8_t*)Rx_data,sizeof(Rx_data));
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <HAL_UART_RxCpltCallback+0x24>)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_RxCpltCallback+0x28>)
 8000bc0:	f003 ffa4 	bl	8004b0c <HAL_UART_Receive_DMA>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000c9 	.word	0x200000c9
 8000bd0:	200000c0 	.word	0x200000c0
 8000bd4:	200001d8 	.word	0x200001d8

08000bd8 <PR_INZ_Start>:
extern ADS1115_InitTypeDef ADS1115;
extern LCD_InitTypeDef 	LCD1;
extern PR_INZ_InitTypeDef 	PRINZ1;

/* @brief: function to start motors */
void PR_INZ_Start(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

		 HAL_TIM_Base_Start_IT(&htim10);
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <PR_INZ_Start+0x40>)
 8000bde:	f003 fc73 	bl	80044c8 <HAL_TIM_Base_Start_IT>
		 PRINZ1.flag_dir=IN;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <PR_INZ_Start+0x44>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
		 PRINZ1.movement_ok_flag=HIGH;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <PR_INZ_Start+0x44>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	70da      	strb	r2, [r3, #3]
		 PRINZ1.count=0;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <PR_INZ_Start+0x44>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	725a      	strb	r2, [r3, #9]
		 PRINZ1.M1late_flag=0;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <PR_INZ_Start+0x44>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	705a      	strb	r2, [r3, #1]
		 PRINZ1.M2late_flag=0;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <PR_INZ_Start+0x44>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	709a      	strb	r2, [r3, #2]
		 GPIOA->BSRR=LED_START_Pin;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <PR_INZ_Start+0x48>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	619a      	str	r2, [r3, #24]
		 GPIOA->BSRR=(uint32_t)LED_STOP_Pin<<16;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <PR_INZ_Start+0x48>)
 8000c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0c:	619a      	str	r2, [r3, #24]
		 ucUART_1byteflag=2;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <PR_INZ_Start+0x4c>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	701a      	strb	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000190 	.word	0x20000190
 8000c1c:	20000148 	.word	0x20000148
 8000c20:	40020000 	.word	0x40020000
 8000c24:	200000c7 	.word	0x200000c7

08000c28 <PR_INZ_Stop>:

/* @brief: function to stop motors */
void PR_INZ_Stop(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
		HAL_TIM_Base_Stop_IT(&htim10);
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <PR_INZ_Stop+0x3c>)
 8000c2e:	f003 fcad 	bl	800458c <HAL_TIM_Base_Stop_IT>
		//PRINZ1.flag_dir=IN;
		PRINZ1.movement_ok_flag=LOW;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <PR_INZ_Stop+0x40>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
		PRINZ1.M1_start_flag=0;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <PR_INZ_Stop+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	711a      	strb	r2, [r3, #4]
		PRINZ1.M1_stop_flag=0;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <PR_INZ_Stop+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	719a      	strb	r2, [r3, #6]
		PRINZ1.M2_start_flag=0;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <PR_INZ_Stop+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	715a      	strb	r2, [r3, #5]
		PRINZ1.M2_stop_flag=0;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <PR_INZ_Stop+0x40>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	71da      	strb	r2, [r3, #7]
		GPIOA->BSRR=LED_START_Pin;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <PR_INZ_Stop+0x44>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	619a      	str	r2, [r3, #24]
		GPIOA->BSRR=(uint32_t)LED_STOP_Pin<<16;
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <PR_INZ_Stop+0x44>)
 8000c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c5c:	619a      	str	r2, [r3, #24]
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000190 	.word	0x20000190
 8000c68:	20000148 	.word	0x20000148
 8000c6c:	40020000 	.word	0x40020000

08000c70 <PR_INZ_Measure>:

/*  @brief: makes measurements of field and resistance and then send it via UART to PC and via I2C to LCD*/
void PR_INZ_Measure(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	LCD_Clear(&LCD1);
 8000c74:	4845      	ldr	r0, [pc, #276]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000c76:	f7ff fdb9 	bl	80007ec <LCD_Clear>
	if(ucUART_1byteflag==0 || ucUART_1byteflag==2){
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <PR_INZ_Measure+0x120>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <PR_INZ_Measure+0x1a>
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <PR_INZ_Measure+0x120>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d129      	bne.n	8000cde <PR_INZ_Measure+0x6e>
	ADS1115.CHANNEL 	= 	ADS1115_CHANNEL0;
 8000c8a:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	749a      	strb	r2, [r3, #18]
	ADS1115.MUX 		= 	ADS1115_MUX_Channel_0;
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c96:	805a      	strh	r2, [r3, #2]
	ADS1115.PGA 		= 	ADS1115_PGA_4096;
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9e:	809a      	strh	r2, [r3, #4]
	ADS_Config(&ADS1115);
 8000ca0:	483c      	ldr	r0, [pc, #240]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000ca2:	f7ff fc6f 	bl	8000584 <ADS_Config>
	HAL_Delay(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f001 f8a2 	bl	8001df0 <HAL_Delay>
	ADS1115_ReadRawData(&ADS1115);
 8000cac:	4839      	ldr	r0, [pc, #228]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000cae:	f7ff fcbf 	bl	8000630 <ADS1115_ReadRawData>
	sprintf(PRINZ1.Tx_data,"Vf=%d V",ADS1115.ADS1115_RawData[0]);
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000cb4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4937      	ldr	r1, [pc, #220]	; (8000d98 <PR_INZ_Measure+0x128>)
 8000cbc:	4837      	ldr	r0, [pc, #220]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000cbe:	f005 f885 	bl	8005dcc <siprintf>
	HAL_UART_Transmit_DMA(&huart2,(uint8_t*)PRINZ1.Tx_data,8);
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	4935      	ldr	r1, [pc, #212]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000cc6:	4836      	ldr	r0, [pc, #216]	; (8000da0 <PR_INZ_Measure+0x130>)
 8000cc8:	f003 fea2 	bl	8004a10 <HAL_UART_Transmit_DMA>
	LCD_Set_Cursor(0, 0,&LCD1);
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fd97 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(PRINZ1.Tx_data, &LCD1);
 8000cd6:	492d      	ldr	r1, [pc, #180]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000cd8:	4830      	ldr	r0, [pc, #192]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000cda:	f7ff fe01 	bl	80008e0 <LCD_Print>
	}
	if(ucUART_1byteflag==1 || ucUART_1byteflag==2){
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <PR_INZ_Measure+0x120>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d003      	beq.n	8000cee <PR_INZ_Measure+0x7e>
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <PR_INZ_Measure+0x120>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d129      	bne.n	8000d42 <PR_INZ_Measure+0xd2>
	ADS1115.CHANNEL 	= 	ADS1115_CHANNEL1;
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	749a      	strb	r2, [r3, #18]
	ADS1115.MUX 		= 	ADS1115_MUX_Differ_13;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfa:	805a      	strh	r2, [r3, #2]
	ADS1115.PGA 		= 	ADS1115_PGA_0512;
 8000cfc:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d02:	809a      	strh	r2, [r3, #4]
	ADS_Config(&ADS1115);
 8000d04:	4823      	ldr	r0, [pc, #140]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000d06:	f7ff fc3d 	bl	8000584 <ADS_Config>
	HAL_Delay(10);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f001 f870 	bl	8001df0 <HAL_Delay>
	ADS1115_ReadRawData(&ADS1115);
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000d12:	f7ff fc8d 	bl	8000630 <ADS1115_ReadRawData>

	sprintf(PRINZ1.Tx_data,"Vr=%d V",ADS1115.ADS1115_RawData[1]);
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <PR_INZ_Measure+0x124>)
 8000d18:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4921      	ldr	r1, [pc, #132]	; (8000da4 <PR_INZ_Measure+0x134>)
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000d22:	f005 f853 	bl	8005dcc <siprintf>
	HAL_UART_Transmit_DMA(&huart2,(uint8_t*)PRINZ1.Tx_data,8);
 8000d26:	2208      	movs	r2, #8
 8000d28:	491c      	ldr	r1, [pc, #112]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <PR_INZ_Measure+0x130>)
 8000d2c:	f003 fe70 	bl	8004a10 <HAL_UART_Transmit_DMA>
	LCD_Set_Cursor(1, 0,&LCD1);
 8000d30:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d32:	2100      	movs	r1, #0
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff fd65 	bl	8000804 <LCD_Set_Cursor>
	LCD_Print(PRINZ1.Tx_data, &LCD1);
 8000d3a:	4914      	ldr	r1, [pc, #80]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <PR_INZ_Measure+0x12c>)
 8000d3e:	f7ff fdcf 	bl	80008e0 <LCD_Print>
	}
	if(PRINZ1.flag_dir && PRINZ1.movement_ok_flag) {
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <PR_INZ_Measure+0x138>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00d      	beq.n	8000d66 <PR_INZ_Measure+0xf6>
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <PR_INZ_Measure+0x138>)
 8000d4c:	78db      	ldrb	r3, [r3, #3]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d009      	beq.n	8000d66 <PR_INZ_Measure+0xf6>
		LCD_Set_Cursor(0, 10,&LCD1);
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d54:	210a      	movs	r1, #10
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fd54 	bl	8000804 <LCD_Set_Cursor>
		LCD_Print("meas+",&LCD1);
 8000d5c:	490b      	ldr	r1, [pc, #44]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d5e:	4813      	ldr	r0, [pc, #76]	; (8000dac <PR_INZ_Measure+0x13c>)
 8000d60:	f7ff fdbe 	bl	80008e0 <LCD_Print>
	}
	else if (PRINZ1.flag_dir==OUT && PRINZ1.movement_ok_flag){
		LCD_Set_Cursor(0, 10, &LCD1);
		LCD_Print("meas-", &LCD1);
	}
}
 8000d64:	e010      	b.n	8000d88 <PR_INZ_Measure+0x118>
	else if (PRINZ1.flag_dir==OUT && PRINZ1.movement_ok_flag){
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <PR_INZ_Measure+0x138>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <PR_INZ_Measure+0x118>
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <PR_INZ_Measure+0x138>)
 8000d70:	78db      	ldrb	r3, [r3, #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <PR_INZ_Measure+0x118>
		LCD_Set_Cursor(0, 10, &LCD1);
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d78:	210a      	movs	r1, #10
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fd42 	bl	8000804 <LCD_Set_Cursor>
		LCD_Print("meas-", &LCD1);
 8000d80:	4902      	ldr	r1, [pc, #8]	; (8000d8c <PR_INZ_Measure+0x11c>)
 8000d82:	480b      	ldr	r0, [pc, #44]	; (8000db0 <PR_INZ_Measure+0x140>)
 8000d84:	f7ff fdac 	bl	80008e0 <LCD_Print>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000140 	.word	0x20000140
 8000d90:	200000c7 	.word	0x200000c7
 8000d94:	20000120 	.word	0x20000120
 8000d98:	080067d8 	.word	0x080067d8
 8000d9c:	20000152 	.word	0x20000152
 8000da0:	200001d8 	.word	0x200001d8
 8000da4:	080067e0 	.word	0x080067e0
 8000da8:	20000148 	.word	0x20000148
 8000dac:	080067e8 	.word	0x080067e8
 8000db0:	080067f0 	.word	0x080067f0

08000db4 <PR_INZ_M1_Move>:

/* @brief: function that force stepper to rotate CW or CCW (depends on flag_dir state)
 	 count will be changed in that function*/

void PR_INZ_M1_Move(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M1_direction_GPIO_Port,M1_direction_Pin, PRINZ1.flag_dir);
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <PR_INZ_M1_Move+0x58>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4813      	ldr	r0, [pc, #76]	; (8000e10 <PR_INZ_M1_Move+0x5c>)
 8000dc4:	f001 fed0 	bl	8002b68 <HAL_GPIO_WritePin>

	for(uint8_t i=0;i<PRINZ1.MotorSteps[PRINZ1.count];i++){
 8000dc8:	2300      	movs	r3, #0
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	e00f      	b.n	8000dee <PR_INZ_M1_Move+0x3a>

		GPIOB->BSRR=M1_step_Pin;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <PR_INZ_M1_Move+0x5c>)
 8000dd0:	2210      	movs	r2, #16
 8000dd2:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 f80b 	bl	8001df0 <HAL_Delay>
		GPIOB->BSRR=(uint32_t)M1_step_Pin<<16U;
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <PR_INZ_M1_Move+0x5c>)
 8000ddc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000de0:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f001 f804 	bl	8001df0 <HAL_Delay>
	for(uint8_t i=0;i<PRINZ1.MotorSteps[PRINZ1.count];i++){
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	3301      	adds	r3, #1
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <PR_INZ_M1_Move+0x58>)
 8000df0:	7a5b      	ldrb	r3, [r3, #9]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <PR_INZ_M1_Move+0x58>)
 8000df6:	4413      	add	r3, r2
 8000df8:	7c9b      	ldrb	r3, [r3, #18]
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d3e6      	bcc.n	8000dce <PR_INZ_M1_Move+0x1a>

	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000148 	.word	0x20000148
 8000e10:	40020400 	.word	0x40020400

08000e14 <PR_INZ_Move_Both>:
/* @brief: new function for moving both a the time , used only from uart call , */
void PR_INZ_Move_Both(uint8_t steps){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(M1_direction_GPIO_Port,M1_direction_Pin, PRINZ1.flag_dir);
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <PR_INZ_Move_Both+0x64>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	2120      	movs	r1, #32
 8000e26:	4815      	ldr	r0, [pc, #84]	; (8000e7c <PR_INZ_Move_Both+0x68>)
 8000e28:	f001 fe9e 	bl	8002b68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_direction_GPIO_Port,M2_direction_Pin, PRINZ1.flag_dir);
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <PR_INZ_Move_Both+0x64>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	4812      	ldr	r0, [pc, #72]	; (8000e80 <PR_INZ_Move_Both+0x6c>)
 8000e38:	f001 fe96 	bl	8002b68 <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<steps;i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e010      	b.n	8000e64 <PR_INZ_Move_Both+0x50>
	GPIOB->BSRR=M1_step_Pin|M2_step_Pin;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <PR_INZ_Move_Both+0x68>)
 8000e44:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8000e48:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 ffd0 	bl	8001df0 <HAL_Delay>
	GPIOB->BSRR=(uint32_t)(M1_step_Pin|M2_step_Pin)<<16U;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <PR_INZ_Move_Both+0x68>)
 8000e52:	f04f 6282 	mov.w	r2, #68157440	; 0x4100000
 8000e56:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 ffc9 	bl	8001df0 <HAL_Delay>
	for(uint8_t i=0;i<steps;i++){
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	3301      	adds	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3ea      	bcc.n	8000e42 <PR_INZ_Move_Both+0x2e>
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000148 	.word	0x20000148
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020000 	.word	0x40020000

08000e84 <PR_INZ_M2_Move>:
/* @brief: function that force stepper to rotate CW or CCW (depends on flag_dir state)
 * continue_flag will be changed in that function as a
 */
void PR_INZ_M2_Move(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(M2_direction_GPIO_Port,M2_direction_Pin, PRINZ1.flag_dir);
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <PR_INZ_M2_Move+0x5c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <PR_INZ_M2_Move+0x60>)
 8000e96:	f001 fe67 	bl	8002b68 <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<PRINZ1.MotorSteps[PRINZ1.count];i++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e010      	b.n	8000ec2 <PR_INZ_M2_Move+0x3e>
		GPIOB->BSRR=M2_step_Pin;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <PR_INZ_M2_Move+0x64>)
 8000ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea6:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 ffa1 	bl	8001df0 <HAL_Delay>
		GPIOB->BSRR=(uint32_t)M2_step_Pin<<16U;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <PR_INZ_M2_Move+0x64>)
 8000eb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eb4:	619a      	str	r2, [r3, #24]
		HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 ff9a 	bl	8001df0 <HAL_Delay>
	for(uint8_t i=0;i<PRINZ1.MotorSteps[PRINZ1.count];i++){
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <PR_INZ_M2_Move+0x5c>)
 8000ec4:	7a5b      	ldrb	r3, [r3, #9]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <PR_INZ_M2_Move+0x5c>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	7c9b      	ldrb	r3, [r3, #18]
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3e5      	bcc.n	8000ea0 <PR_INZ_M2_Move+0x1c>
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000148 	.word	0x20000148
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400

08000eec <PR_INZ_Service>:

/*@brief: task for servising all gpio activations*/
void PR_INZ_Service(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

	switch(PRINZ1.type_of_task){
 8000ef0:	4b96      	ldr	r3, [pc, #600]	; (800114c <PR_INZ_Service+0x260>)
 8000ef2:	7a1b      	ldrb	r3, [r3, #8]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	f200 81bb 	bhi.w	8001272 <PR_INZ_Service+0x386>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <PR_INZ_Service+0x18>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f19 	.word	0x08000f19
 8000f08:	08001079 	.word	0x08001079
 8000f0c:	08001085 	.word	0x08001085
 8000f10:	080011dd 	.word	0x080011dd
 8000f14:	0800124f 	.word	0x0800124f
	case FULL_TASK:
		if(PRINZ1.flag_dir==IN &&(PRINZ1.count!=COUNT_MAX-1)&&PRINZ1.movement_ok_flag){
 8000f18:	4b8c      	ldr	r3, [pc, #560]	; (800114c <PR_INZ_Service+0x260>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d146      	bne.n	8000fae <PR_INZ_Service+0xc2>
 8000f20:	4b8a      	ldr	r3, [pc, #552]	; (800114c <PR_INZ_Service+0x260>)
 8000f22:	7a5b      	ldrb	r3, [r3, #9]
 8000f24:	2b31      	cmp	r3, #49	; 0x31
 8000f26:	d042      	beq.n	8000fae <PR_INZ_Service+0xc2>
 8000f28:	4b88      	ldr	r3, [pc, #544]	; (800114c <PR_INZ_Service+0x260>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d03e      	beq.n	8000fae <PR_INZ_Service+0xc2>
			if(PRINZ1.M1late_flag && !PRINZ1.M2late_flag) {
 8000f30:	4b86      	ldr	r3, [pc, #536]	; (800114c <PR_INZ_Service+0x260>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <PR_INZ_Service+0x60>
 8000f38:	4b84      	ldr	r3, [pc, #528]	; (800114c <PR_INZ_Service+0x260>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <PR_INZ_Service+0x60>
				PR_INZ_M1_Move();
 8000f46:	f7ff ff35 	bl	8000db4 <PR_INZ_M1_Move>
 8000f4a:	e02c      	b.n	8000fa6 <PR_INZ_Service+0xba>
			}
			else if(PRINZ1.M2late_flag && !PRINZ1.M1late_flag) {
 8000f4c:	4b7f      	ldr	r3, [pc, #508]	; (800114c <PR_INZ_Service+0x260>)
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <PR_INZ_Service+0x7c>
 8000f54:	4b7d      	ldr	r3, [pc, #500]	; (800114c <PR_INZ_Service+0x260>)
 8000f56:	785b      	ldrb	r3, [r3, #1]
 8000f58:	f083 0301 	eor.w	r3, r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <PR_INZ_Service+0x7c>
				PR_INZ_M2_Move();
 8000f62:	f7ff ff8f 	bl	8000e84 <PR_INZ_M2_Move>
 8000f66:	e01e      	b.n	8000fa6 <PR_INZ_Service+0xba>
			}
			else if(!(PRINZ1.M1late_flag && PRINZ1.M2late_flag)) {
 8000f68:	4b78      	ldr	r3, [pc, #480]	; (800114c <PR_INZ_Service+0x260>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d106      	bne.n	8000f84 <PR_INZ_Service+0x98>
 8000f76:	4b75      	ldr	r3, [pc, #468]	; (800114c <PR_INZ_Service+0x260>)
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d010      	beq.n	8000fa6 <PR_INZ_Service+0xba>
				PR_INZ_Move_Both(PRINZ1.MotorSteps[PRINZ1.count]);
 8000f84:	4b71      	ldr	r3, [pc, #452]	; (800114c <PR_INZ_Service+0x260>)
 8000f86:	7a5b      	ldrb	r3, [r3, #9]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b70      	ldr	r3, [pc, #448]	; (800114c <PR_INZ_Service+0x260>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	7c9b      	ldrb	r3, [r3, #18]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff3f 	bl	8000e14 <PR_INZ_Move_Both>
				PR_INZ_Measure();
 8000f96:	f7ff fe6b 	bl	8000c70 <PR_INZ_Measure>
				PRINZ1.count++;
 8000f9a:	4b6c      	ldr	r3, [pc, #432]	; (800114c <PR_INZ_Service+0x260>)
 8000f9c:	7a5b      	ldrb	r3, [r3, #9]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	; (800114c <PR_INZ_Service+0x260>)
 8000fa4:	725a      	strb	r2, [r3, #9]
			}
			PRINZ1.movement_ok_flag=0;
 8000fa6:	4b69      	ldr	r3, [pc, #420]	; (800114c <PR_INZ_Service+0x260>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	70da      	strb	r2, [r3, #3]
 8000fac:	e049      	b.n	8001042 <PR_INZ_Service+0x156>
		}
		else if(PRINZ1.flag_dir==OUT &&(PRINZ1.count!=0)&&PRINZ1.movement_ok_flag){
 8000fae:	4b67      	ldr	r3, [pc, #412]	; (800114c <PR_INZ_Service+0x260>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d145      	bne.n	8001042 <PR_INZ_Service+0x156>
 8000fb6:	4b65      	ldr	r3, [pc, #404]	; (800114c <PR_INZ_Service+0x260>)
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d041      	beq.n	8001042 <PR_INZ_Service+0x156>
 8000fbe:	4b63      	ldr	r3, [pc, #396]	; (800114c <PR_INZ_Service+0x260>)
 8000fc0:	78db      	ldrb	r3, [r3, #3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03d      	beq.n	8001042 <PR_INZ_Service+0x156>
			if(PRINZ1.M1late_flag && !PRINZ1.M2late_flag) {
 8000fc6:	4b61      	ldr	r3, [pc, #388]	; (800114c <PR_INZ_Service+0x260>)
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <PR_INZ_Service+0xf6>
 8000fce:	4b5f      	ldr	r3, [pc, #380]	; (800114c <PR_INZ_Service+0x260>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <PR_INZ_Service+0xf6>
				PR_INZ_M1_Move();
 8000fdc:	f7ff feea 	bl	8000db4 <PR_INZ_M1_Move>
 8000fe0:	e02c      	b.n	800103c <PR_INZ_Service+0x150>
			}
			else if(PRINZ1.M2late_flag && !PRINZ1.M1late_flag) {
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <PR_INZ_Service+0x260>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d009      	beq.n	8000ffe <PR_INZ_Service+0x112>
 8000fea:	4b58      	ldr	r3, [pc, #352]	; (800114c <PR_INZ_Service+0x260>)
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <PR_INZ_Service+0x112>
				PR_INZ_M2_Move();
 8000ff8:	f7ff ff44 	bl	8000e84 <PR_INZ_M2_Move>
 8000ffc:	e01e      	b.n	800103c <PR_INZ_Service+0x150>
			}
			else if(!(PRINZ1.M1late_flag && PRINZ1.M2late_flag)) {
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <PR_INZ_Service+0x260>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d106      	bne.n	800101a <PR_INZ_Service+0x12e>
 800100c:	4b4f      	ldr	r3, [pc, #316]	; (800114c <PR_INZ_Service+0x260>)
 800100e:	789b      	ldrb	r3, [r3, #2]
 8001010:	f083 0301 	eor.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d010      	beq.n	800103c <PR_INZ_Service+0x150>
				PR_INZ_Move_Both(PRINZ1.MotorSteps[PRINZ1.count]);
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <PR_INZ_Service+0x260>)
 800101c:	7a5b      	ldrb	r3, [r3, #9]
 800101e:	461a      	mov	r2, r3
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <PR_INZ_Service+0x260>)
 8001022:	4413      	add	r3, r2
 8001024:	7c9b      	ldrb	r3, [r3, #18]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fef4 	bl	8000e14 <PR_INZ_Move_Both>
				PR_INZ_Measure();
 800102c:	f7ff fe20 	bl	8000c70 <PR_INZ_Measure>
				PRINZ1.count--;
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <PR_INZ_Service+0x260>)
 8001032:	7a5b      	ldrb	r3, [r3, #9]
 8001034:	3b01      	subs	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b44      	ldr	r3, [pc, #272]	; (800114c <PR_INZ_Service+0x260>)
 800103a:	725a      	strb	r2, [r3, #9]
			}
			PRINZ1.movement_ok_flag=0;
 800103c:	4b43      	ldr	r3, [pc, #268]	; (800114c <PR_INZ_Service+0x260>)
 800103e:	2200      	movs	r2, #0
 8001040:	70da      	strb	r2, [r3, #3]
		}
		if(PRINZ1.count==COUNT_MAX-1) PRINZ1.flag_dir=OUT;
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <PR_INZ_Service+0x260>)
 8001044:	7a5b      	ldrb	r3, [r3, #9]
 8001046:	2b31      	cmp	r3, #49	; 0x31
 8001048:	d103      	bne.n	8001052 <PR_INZ_Service+0x166>
 800104a:	4b40      	ldr	r3, [pc, #256]	; (800114c <PR_INZ_Service+0x260>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
		else if(PRINZ1.count==0 &&PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
			PRINZ1.type_of_task=END_OF_TASK;
		}
		break;
 8001050:	e111      	b.n	8001276 <PR_INZ_Service+0x38a>
		else if(PRINZ1.count==0 &&PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <PR_INZ_Service+0x260>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f040 810d 	bne.w	8001276 <PR_INZ_Service+0x38a>
 800105c:	4b3b      	ldr	r3, [pc, #236]	; (800114c <PR_INZ_Service+0x260>)
 800105e:	799b      	ldrb	r3, [r3, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 8108 	beq.w	8001276 <PR_INZ_Service+0x38a>
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <PR_INZ_Service+0x260>)
 8001068:	79db      	ldrb	r3, [r3, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8103 	beq.w	8001276 <PR_INZ_Service+0x38a>
			PRINZ1.type_of_task=END_OF_TASK;
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <PR_INZ_Service+0x260>)
 8001072:	2205      	movs	r2, #5
 8001074:	721a      	strb	r2, [r3, #8]
		break;
 8001076:	e0fe      	b.n	8001276 <PR_INZ_Service+0x38a>

	case MEASUREMENT_ONLY:
		PR_INZ_Measure();//we only measuring here
 8001078:	f7ff fdfa 	bl	8000c70 <PR_INZ_Measure>
		PRINZ1.type_of_task=STANDBY;
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <PR_INZ_Service+0x260>)
 800107e:	2200      	movs	r2, #0
 8001080:	721a      	strb	r2, [r3, #8]
		break;
 8001082:	e0fb      	b.n	800127c <PR_INZ_Service+0x390>

	case MOVING_ONLY:
		if(PRINZ1.flag_dir==IN &&(PRINZ1.count!=COUNT_MAX-1)&&PRINZ1.movement_ok_flag){
 8001084:	4b31      	ldr	r3, [pc, #196]	; (800114c <PR_INZ_Service+0x260>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d144      	bne.n	8001116 <PR_INZ_Service+0x22a>
 800108c:	4b2f      	ldr	r3, [pc, #188]	; (800114c <PR_INZ_Service+0x260>)
 800108e:	7a5b      	ldrb	r3, [r3, #9]
 8001090:	2b31      	cmp	r3, #49	; 0x31
 8001092:	d040      	beq.n	8001116 <PR_INZ_Service+0x22a>
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <PR_INZ_Service+0x260>)
 8001096:	78db      	ldrb	r3, [r3, #3]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d03c      	beq.n	8001116 <PR_INZ_Service+0x22a>
			if(PRINZ1.M1late_flag && !PRINZ1.M2late_flag) {
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <PR_INZ_Service+0x260>)
 800109e:	785b      	ldrb	r3, [r3, #1]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <PR_INZ_Service+0x1cc>
 80010a4:	4b29      	ldr	r3, [pc, #164]	; (800114c <PR_INZ_Service+0x260>)
 80010a6:	789b      	ldrb	r3, [r3, #2]
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <PR_INZ_Service+0x1cc>
				PR_INZ_M1_Move();
 80010b2:	f7ff fe7f 	bl	8000db4 <PR_INZ_M1_Move>
 80010b6:	e02a      	b.n	800110e <PR_INZ_Service+0x222>
			}
			else if(PRINZ1.M2late_flag && !PRINZ1.M1late_flag) {
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <PR_INZ_Service+0x260>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d009      	beq.n	80010d4 <PR_INZ_Service+0x1e8>
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <PR_INZ_Service+0x260>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	f083 0301 	eor.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <PR_INZ_Service+0x1e8>
				PR_INZ_M2_Move();
 80010ce:	f7ff fed9 	bl	8000e84 <PR_INZ_M2_Move>
 80010d2:	e01c      	b.n	800110e <PR_INZ_Service+0x222>
			}
			else if(!(PRINZ1.M1late_flag && PRINZ1.M2late_flag)) {
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <PR_INZ_Service+0x260>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <PR_INZ_Service+0x204>
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <PR_INZ_Service+0x260>)
 80010e4:	789b      	ldrb	r3, [r3, #2]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00e      	beq.n	800110e <PR_INZ_Service+0x222>
				PR_INZ_Move_Both(PRINZ1.MotorSteps[PRINZ1.count]);
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <PR_INZ_Service+0x260>)
 80010f2:	7a5b      	ldrb	r3, [r3, #9]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <PR_INZ_Service+0x260>)
 80010f8:	4413      	add	r3, r2
 80010fa:	7c9b      	ldrb	r3, [r3, #18]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe89 	bl	8000e14 <PR_INZ_Move_Both>
				PRINZ1.count++;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <PR_INZ_Service+0x260>)
 8001104:	7a5b      	ldrb	r3, [r3, #9]
 8001106:	3301      	adds	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <PR_INZ_Service+0x260>)
 800110c:	725a      	strb	r2, [r3, #9]
			}
			PRINZ1.movement_ok_flag=0;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <PR_INZ_Service+0x260>)
 8001110:	2200      	movs	r2, #0
 8001112:	70da      	strb	r2, [r3, #3]
 8001114:	e04a      	b.n	80011ac <PR_INZ_Service+0x2c0>
		}
		else if(PRINZ1.flag_dir==OUT &&(PRINZ1.count!=0)&&PRINZ1.movement_ok_flag){
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <PR_INZ_Service+0x260>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d146      	bne.n	80011ac <PR_INZ_Service+0x2c0>
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <PR_INZ_Service+0x260>)
 8001120:	7a5b      	ldrb	r3, [r3, #9]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d042      	beq.n	80011ac <PR_INZ_Service+0x2c0>
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <PR_INZ_Service+0x260>)
 8001128:	78db      	ldrb	r3, [r3, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d03e      	beq.n	80011ac <PR_INZ_Service+0x2c0>
			if(PRINZ1.M1late_flag && !PRINZ1.M2late_flag) {
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <PR_INZ_Service+0x260>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <PR_INZ_Service+0x264>
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <PR_INZ_Service+0x260>)
 8001138:	789b      	ldrb	r3, [r3, #2]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <PR_INZ_Service+0x264>
				PR_INZ_M1_Move();
 8001144:	f7ff fe36 	bl	8000db4 <PR_INZ_M1_Move>
 8001148:	e02d      	b.n	80011a6 <PR_INZ_Service+0x2ba>
 800114a:	bf00      	nop
 800114c:	20000148 	.word	0x20000148
			}
			else if(PRINZ1.M2late_flag && !PRINZ1.M1late_flag) {
 8001150:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <PR_INZ_Service+0x394>)
 8001152:	789b      	ldrb	r3, [r3, #2]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d009      	beq.n	800116c <PR_INZ_Service+0x280>
 8001158:	4b49      	ldr	r3, [pc, #292]	; (8001280 <PR_INZ_Service+0x394>)
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <PR_INZ_Service+0x280>
				PR_INZ_M2_Move();
 8001166:	f7ff fe8d 	bl	8000e84 <PR_INZ_M2_Move>
 800116a:	e01c      	b.n	80011a6 <PR_INZ_Service+0x2ba>
			}
			else if(!(PRINZ1.M1late_flag && PRINZ1.M2late_flag)) {
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <PR_INZ_Service+0x394>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d106      	bne.n	8001188 <PR_INZ_Service+0x29c>
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <PR_INZ_Service+0x394>)
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00e      	beq.n	80011a6 <PR_INZ_Service+0x2ba>
				PR_INZ_Move_Both(PRINZ1.MotorSteps[PRINZ1.count]);
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <PR_INZ_Service+0x394>)
 800118a:	7a5b      	ldrb	r3, [r3, #9]
 800118c:	461a      	mov	r2, r3
 800118e:	4b3c      	ldr	r3, [pc, #240]	; (8001280 <PR_INZ_Service+0x394>)
 8001190:	4413      	add	r3, r2
 8001192:	7c9b      	ldrb	r3, [r3, #18]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe3d 	bl	8000e14 <PR_INZ_Move_Both>
				PRINZ1.count--;
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <PR_INZ_Service+0x394>)
 800119c:	7a5b      	ldrb	r3, [r3, #9]
 800119e:	3b01      	subs	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <PR_INZ_Service+0x394>)
 80011a4:	725a      	strb	r2, [r3, #9]
			}
			PRINZ1.movement_ok_flag=0;
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <PR_INZ_Service+0x394>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	70da      	strb	r2, [r3, #3]
		}
		if(PRINZ1.count==COUNT_MAX-1) PRINZ1.flag_dir=OUT;
 80011ac:	4b34      	ldr	r3, [pc, #208]	; (8001280 <PR_INZ_Service+0x394>)
 80011ae:	7a5b      	ldrb	r3, [r3, #9]
 80011b0:	2b31      	cmp	r3, #49	; 0x31
 80011b2:	d103      	bne.n	80011bc <PR_INZ_Service+0x2d0>
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <PR_INZ_Service+0x394>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		else if(PRINZ1.count==0 &&PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
			PRINZ1.type_of_task=END_OF_TASK;
		}
		break;
 80011ba:	e05e      	b.n	800127a <PR_INZ_Service+0x38e>
		else if(PRINZ1.count==0 &&PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <PR_INZ_Service+0x394>)
 80011be:	7a5b      	ldrb	r3, [r3, #9]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d15a      	bne.n	800127a <PR_INZ_Service+0x38e>
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <PR_INZ_Service+0x394>)
 80011c6:	799b      	ldrb	r3, [r3, #6]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d056      	beq.n	800127a <PR_INZ_Service+0x38e>
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <PR_INZ_Service+0x394>)
 80011ce:	79db      	ldrb	r3, [r3, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d052      	beq.n	800127a <PR_INZ_Service+0x38e>
			PRINZ1.type_of_task=END_OF_TASK;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <PR_INZ_Service+0x394>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	721a      	strb	r2, [r3, #8]
		break;
 80011da:	e04e      	b.n	800127a <PR_INZ_Service+0x38e>

	case RETURNING://what we do while returning to start
		  PRINZ1.flag_dir=OUT;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <PR_INZ_Service+0x394>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		  LCD_Clear(&LCD1);
 80011e2:	4828      	ldr	r0, [pc, #160]	; (8001284 <PR_INZ_Service+0x398>)
 80011e4:	f7ff fb02 	bl	80007ec <LCD_Clear>
		  LCD_Print("Return to start",&LCD1);
 80011e8:	4926      	ldr	r1, [pc, #152]	; (8001284 <PR_INZ_Service+0x398>)
 80011ea:	4827      	ldr	r0, [pc, #156]	; (8001288 <PR_INZ_Service+0x39c>)
 80011ec:	f7ff fb78 	bl	80008e0 <LCD_Print>
		  while(!(GPIOC->IDR & M1_start_Pin) || !(GPIOC->IDR & M2_start_Pin)){
 80011f0:	e01d      	b.n	800122e <PR_INZ_Service+0x342>
			  if(!PRINZ1.M1_start_flag&&!(GPIOC->IDR & M1_start_Pin)) {
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <PR_INZ_Service+0x394>)
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	f083 0301 	eor.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <PR_INZ_Service+0x324>
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <PR_INZ_Service+0x3a0>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <PR_INZ_Service+0x324>
				  PR_INZ_M1_Move();
 800120c:	f7ff fdd2 	bl	8000db4 <PR_INZ_M1_Move>
			  }
			  if(!PRINZ1.M2_start_flag&&!(GPIOC->IDR & M2_start_Pin)) {
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <PR_INZ_Service+0x394>)
 8001212:	795b      	ldrb	r3, [r3, #5]
 8001214:	f083 0301 	eor.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <PR_INZ_Service+0x342>
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <PR_INZ_Service+0x3a0>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <PR_INZ_Service+0x342>
				  PR_INZ_M2_Move();
 800122a:	f7ff fe2b 	bl	8000e84 <PR_INZ_M2_Move>
		  while(!(GPIOC->IDR & M1_start_Pin) || !(GPIOC->IDR & M2_start_Pin)){
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <PR_INZ_Service+0x3a0>)
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0db      	beq.n	80011f2 <PR_INZ_Service+0x306>
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <PR_INZ_Service+0x3a0>)
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0d5      	beq.n	80011f2 <PR_INZ_Service+0x306>
			  }

		  }
		  PRINZ1.type_of_task=STANDBY;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <PR_INZ_Service+0x394>)
 8001248:	2200      	movs	r2, #0
 800124a:	721a      	strb	r2, [r3, #8]
		break;
 800124c:	e016      	b.n	800127c <PR_INZ_Service+0x390>

	case END_OF_TASK://what we do if its the end of task
		  PR_INZ_Stop();
 800124e:	f7ff fceb 	bl	8000c28 <PR_INZ_Stop>
		  LCD_Clear(&LCD1);
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <PR_INZ_Service+0x398>)
 8001254:	f7ff faca 	bl	80007ec <LCD_Clear>
		  LCD_Set_Cursor(0, 0, &LCD1);
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <PR_INZ_Service+0x398>)
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fad1 	bl	8000804 <LCD_Set_Cursor>
		  LCD_Print("end of process ", &LCD1);
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <PR_INZ_Service+0x398>)
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <PR_INZ_Service+0x3a4>)
 8001266:	f7ff fb3b 	bl	80008e0 <LCD_Print>
		  PRINZ1.type_of_task=STANDBY;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <PR_INZ_Service+0x394>)
 800126c:	2200      	movs	r2, #0
 800126e:	721a      	strb	r2, [r3, #8]
		break;
 8001270:	e004      	b.n	800127c <PR_INZ_Service+0x390>
	default:
		break;
 8001272:	bf00      	nop
 8001274:	e002      	b.n	800127c <PR_INZ_Service+0x390>
		break;
 8001276:	bf00      	nop
 8001278:	e000      	b.n	800127c <PR_INZ_Service+0x390>
		break;
 800127a:	bf00      	nop
	}
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000148 	.word	0x20000148
 8001284:	20000140 	.word	0x20000140
 8001288:	080067f8 	.word	0x080067f8
 800128c:	40020800 	.word	0x40020800
 8001290:	08006808 	.word	0x08006808

08001294 <HAL_GPIO_EXTI_Callback>:


/* @brief: callback for all gpio interrupts*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	dc29      	bgt.n	80012f8 <HAL_GPIO_EXTI_Callback+0x64>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f340 808e 	ble.w	80013c6 <HAL_GPIO_EXTI_Callback+0x132>
 80012aa:	3b01      	subs	r3, #1
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	f200 808a 	bhi.w	80013c6 <HAL_GPIO_EXTI_Callback+0x132>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001313 	.word	0x08001313
 80012bc:	0800133d 	.word	0x0800133d
 80012c0:	080013c7 	.word	0x080013c7
 80012c4:	0800136d 	.word	0x0800136d
 80012c8:	080013c7 	.word	0x080013c7
 80012cc:	080013c7 	.word	0x080013c7
 80012d0:	080013c7 	.word	0x080013c7
 80012d4:	08001397 	.word	0x08001397
 80012d8:	080013c7 	.word	0x080013c7
 80012dc:	080013c7 	.word	0x080013c7
 80012e0:	080013c7 	.word	0x080013c7
 80012e4:	080013c7 	.word	0x080013c7
 80012e8:	080013c7 	.word	0x080013c7
 80012ec:	080013c7 	.word	0x080013c7
 80012f0:	080013c7 	.word	0x080013c7
 80012f4:	080012ff 	.word	0x080012ff
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_EXTI_Callback+0x76>
				PRINZ1.flag_dir=OUT;

			}
			break;
		default:
			break;
 80012fc:	e063      	b.n	80013c6 <HAL_GPIO_EXTI_Callback+0x132>
			PRINZ1.type_of_task=FULL_TASK;
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001300:	2201      	movs	r2, #1
 8001302:	721a      	strb	r2, [r3, #8]
			PR_INZ_Start();
 8001304:	f7ff fc68 	bl	8000bd8 <PR_INZ_Start>
			break;
 8001308:	e066      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
			PRINZ1.type_of_task=END_OF_TASK;
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800130c:	2205      	movs	r2, #5
 800130e:	721a      	strb	r2, [r3, #8]
			break;
 8001310:	e062      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
			PRINZ1.M1_start_flag=1;
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001314:	2201      	movs	r2, #1
 8001316:	711a      	strb	r2, [r3, #4]
			if((GPIOC->IDR & (M1_start_Pin|M2_start_Pin))&&(PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag)){ //GPIO->IDR & M1_start_Pin|M2_start_Pin
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x150>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	f003 0305 	and.w	r3, r3, #5
 8001320:	2b00      	cmp	r3, #0
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_EXTI_Callback+0x136>
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001326:	799b      	ldrb	r3, [r3, #6]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d04e      	beq.n	80013ca <HAL_GPIO_EXTI_Callback+0x136>
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800132e:	79db      	ldrb	r3, [r3, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d04a      	beq.n	80013ca <HAL_GPIO_EXTI_Callback+0x136>
				PRINZ1.type_of_task=END_OF_TASK;
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001336:	2205      	movs	r2, #5
 8001338:	721a      	strb	r2, [r3, #8]
			break;
 800133a:	e046      	b.n	80013ca <HAL_GPIO_EXTI_Callback+0x136>
			PRINZ1.M2late_flag=1;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800133e:	2201      	movs	r2, #1
 8001340:	709a      	strb	r2, [r3, #2]
			PRINZ1.M1_stop_flag=1;
 8001342:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001344:	2201      	movs	r2, #1
 8001346:	719a      	strb	r2, [r3, #6]
			if(PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800134a:	799b      	ldrb	r3, [r3, #6]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03e      	beq.n	80013ce <HAL_GPIO_EXTI_Callback+0x13a>
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001352:	79db      	ldrb	r3, [r3, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d03a      	beq.n	80013ce <HAL_GPIO_EXTI_Callback+0x13a>
				PRINZ1.M1late_flag=0;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800135a:	2200      	movs	r2, #0
 800135c:	705a      	strb	r2, [r3, #1]
				PRINZ1.M2late_flag=0;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001360:	2200      	movs	r2, #0
 8001362:	709a      	strb	r2, [r3, #2]
				PRINZ1.flag_dir=OUT;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
			break;
 800136a:	e030      	b.n	80013ce <HAL_GPIO_EXTI_Callback+0x13a>
			PRINZ1.M2_start_flag=1;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800136e:	2201      	movs	r2, #1
 8001370:	715a      	strb	r2, [r3, #5]
			if((GPIOC->IDR & (M1_start_Pin|M2_start_Pin))&&(PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag)){ // HAL_GPIO_ReadPin(GPIOC, M2_start_Pin)&&HAL_GPIO_ReadPin(GPIOC, M1_start_Pin)){ //GPIO->IDR & M1_start_Pin|M2_start_Pin
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	f003 0305 	and.w	r3, r3, #5
 800137a:	2b00      	cmp	r3, #0
 800137c:	d029      	beq.n	80013d2 <HAL_GPIO_EXTI_Callback+0x13e>
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001380:	799b      	ldrb	r3, [r3, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_EXTI_Callback+0x13e>
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001388:	79db      	ldrb	r3, [r3, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d021      	beq.n	80013d2 <HAL_GPIO_EXTI_Callback+0x13e>
				PRINZ1.type_of_task=END_OF_TASK;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001390:	2205      	movs	r2, #5
 8001392:	721a      	strb	r2, [r3, #8]
		  	  break;
 8001394:	e01d      	b.n	80013d2 <HAL_GPIO_EXTI_Callback+0x13e>
			PRINZ1.M1late_flag=1;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001398:	2201      	movs	r2, #1
 800139a:	705a      	strb	r2, [r3, #1]
			PRINZ1.M2_stop_flag=1;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	71da      	strb	r2, [r3, #7]
			if(PRINZ1.M1_stop_flag&&PRINZ1.M2_stop_flag){
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80013a4:	799b      	ldrb	r3, [r3, #6]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_GPIO_EXTI_Callback+0x142>
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80013ac:	79db      	ldrb	r3, [r3, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d011      	beq.n	80013d6 <HAL_GPIO_EXTI_Callback+0x142>
				PRINZ1.M1late_flag=0;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	705a      	strb	r2, [r3, #1]
				PRINZ1.M2late_flag=0;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	709a      	strb	r2, [r3, #2]
				PRINZ1.flag_dir=OUT;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
			break;
 80013c4:	e007      	b.n	80013d6 <HAL_GPIO_EXTI_Callback+0x142>
			break;
 80013c6:	bf00      	nop
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
			break;
 80013ca:	bf00      	nop
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
			break;
 80013ce:	bf00      	nop
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
		  	  break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_EXTI_Callback+0x144>
			break;
 80013d6:	bf00      	nop
	}

}//this callback checks which button is pressed and then set the flag to activate certain function
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000148 	.word	0x20000148
 80013e4:	40020800 	.word	0x40020800

080013e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_DMA_Init+0x4c>)
 80013f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DMA_Init+0x4c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2010      	movs	r0, #16
 8001410:	f000 fded 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001414:	2010      	movs	r0, #16
 8001416:	f000 fe06 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2011      	movs	r0, #17
 8001420:	f000 fde5 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001424:	2011      	movs	r0, #17
 8001426:	f000 fdfe 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <MX_GPIO_Init+0x194>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a5d      	ldr	r2, [pc, #372]	; (80015cc <MX_GPIO_Init+0x194>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b5b      	ldr	r3, [pc, #364]	; (80015cc <MX_GPIO_Init+0x194>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b57      	ldr	r3, [pc, #348]	; (80015cc <MX_GPIO_Init+0x194>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a56      	ldr	r2, [pc, #344]	; (80015cc <MX_GPIO_Init+0x194>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b54      	ldr	r3, [pc, #336]	; (80015cc <MX_GPIO_Init+0x194>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <MX_GPIO_Init+0x194>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <MX_GPIO_Init+0x194>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <MX_GPIO_Init+0x194>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <MX_GPIO_Init+0x194>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a48      	ldr	r2, [pc, #288]	; (80015cc <MX_GPIO_Init+0x194>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <MX_GPIO_Init+0x194>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_START_Pin|LED_STOP_Pin|LD2_Pin|M2_direction_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f240 1123 	movw	r1, #291	; 0x123
 80014c4:	4842      	ldr	r0, [pc, #264]	; (80015d0 <MX_GPIO_Init+0x198>)
 80014c6:	f001 fb4f 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_step_Pin|M1_step_Pin|M1_direction_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80014d0:	4840      	ldr	r0, [pc, #256]	; (80015d4 <MX_GPIO_Init+0x19c>)
 80014d2:	f001 fb49 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	483a      	ldr	r0, [pc, #232]	; (80015d8 <MX_GPIO_Init+0x1a0>)
 80014ee:	f001 f9b7 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_start_Pin|M1_stop_Pin|M2_start_Pin|M2_stop_Pin;
 80014f2:	230f      	movs	r3, #15
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4834      	ldr	r0, [pc, #208]	; (80015d8 <MX_GPIO_Init+0x1a0>)
 8001508:	f001 f9aa 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_START_Pin|LED_STOP_Pin|LD2_Pin|M2_direction_Pin;
 800150c:	f240 1323 	movw	r3, #291	; 0x123
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	482a      	ldr	r0, [pc, #168]	; (80015d0 <MX_GPIO_Init+0x198>)
 8001526:	f001 f99b 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin|STOP_BUTTON_Pin;
 800152a:	2350      	movs	r3, #80	; 0x50
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4824      	ldr	r0, [pc, #144]	; (80015d0 <MX_GPIO_Init+0x198>)
 8001540:	f001 f98e 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M2_step_Pin|M1_step_Pin|M1_direction_Pin;
 8001544:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	481d      	ldr	r0, [pc, #116]	; (80015d4 <MX_GPIO_Init+0x19c>)
 800155e:	f001 f97f 	bl	8002860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2006      	movs	r0, #6
 8001568:	f000 fd41 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800156c:	2006      	movs	r0, #6
 800156e:	f000 fd5a 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2007      	movs	r0, #7
 8001578:	f000 fd39 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800157c:	2007      	movs	r0, #7
 800157e:	f000 fd52 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2008      	movs	r0, #8
 8001588:	f000 fd31 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800158c:	2008      	movs	r0, #8
 800158e:	f000 fd4a 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2009      	movs	r0, #9
 8001598:	f000 fd29 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800159c:	2009      	movs	r0, #9
 800159e:	f000 fd42 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	200a      	movs	r0, #10
 80015a8:	f000 fd21 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f000 fd3a 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2017      	movs	r0, #23
 80015b8:	f000 fd19 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015bc:	2017      	movs	r0, #23
 80015be:	f000 fd32 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800

080015dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C1_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <MX_I2C1_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_I2C1_Init+0x50>)
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_I2C1_Init+0x58>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_I2C1_Init+0x50>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_I2C1_Init+0x50>)
 800161a:	f001 fad7 	bl	8002bcc <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 f92a 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000cc 	.word	0x200000cc
 8001630:	40005400 	.word	0x40005400
 8001634:	000186a0 	.word	0x000186a0

08001638 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_I2C_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480c      	ldr	r0, [pc, #48]	; (80016c4 <HAL_I2C_MspInit+0x8c>)
 8001694:	f001 f8e4 	bl	8002860 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 80016a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_I2C_MspInit+0x88>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM10){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d109      	bne.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x26>
		if(!PRINZ1.movement_ok_flag) PRINZ1.movement_ok_flag=1;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	f083 0301 	eor.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x26>
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	70da      	strb	r2, [r3, #3]
	}
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40014400 	.word	0x40014400
 8001700:	20000148 	.word	0x20000148

08001704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001708:	f000 fb00 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800170c:	f000 f84e 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001710:	f7ff fe92 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8001714:	f7ff fe68 	bl	80013e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001718:	f000 f9f0 	bl	8001afc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800171c:	f7ff ff5e 	bl	80015dc <MX_I2C1_Init>
  MX_TIM10_Init();
 8001720:	f000 f9a0 	bl	8001a64 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(&LCD1);
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <main+0x8c>)
 8001726:	f7ff f8a1 	bl	800086c <LCD_Init>
  HAL_UART_Receive_DMA(&huart2,(uint8_t*)Rx_data,sizeof(Rx_data));
 800172a:	2204      	movs	r2, #4
 800172c:	4919      	ldr	r1, [pc, #100]	; (8001794 <main+0x90>)
 800172e:	481a      	ldr	r0, [pc, #104]	; (8001798 <main+0x94>)
 8001730:	f003 f9ec 	bl	8004b0c <HAL_UART_Receive_DMA>
  LCD_Set_Cursor(0, 0, &LCD1);
 8001734:	4a16      	ldr	r2, [pc, #88]	; (8001790 <main+0x8c>)
 8001736:	2100      	movs	r1, #0
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff f863 	bl	8000804 <LCD_Set_Cursor>
  LCD_Print("Ready to measure",&LCD1);
 800173e:	4914      	ldr	r1, [pc, #80]	; (8001790 <main+0x8c>)
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <main+0x98>)
 8001742:	f7ff f8cd 	bl	80008e0 <LCD_Print>
  memcpy(PRINZ1.MotorSteps,steps,COUNT_MAX);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <main+0x9c>)
 8001748:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <main+0xa0>)
 800174a:	4614      	mov	r4, r2
 800174c:	f103 0c12 	add.w	ip, r3, #18
 8001750:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001754:	4665      	mov	r5, ip
 8001756:	4626      	mov	r6, r4
 8001758:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800175a:	6028      	str	r0, [r5, #0]
 800175c:	6069      	str	r1, [r5, #4]
 800175e:	60aa      	str	r2, [r5, #8]
 8001760:	60eb      	str	r3, [r5, #12]
 8001762:	3410      	adds	r4, #16
 8001764:	f10c 0c10 	add.w	ip, ip, #16
 8001768:	4574      	cmp	r4, lr
 800176a:	d1f3      	bne.n	8001754 <main+0x50>
 800176c:	4662      	mov	r2, ip
 800176e:	4623      	mov	r3, r4
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	8013      	strh	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Receive_Callback_Flag) UART_Service();
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <main+0xa4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <main+0x7c>
 800177c:	f7ff f994 	bl	8000aa8 <UART_Service>

	  if(PRINZ1.type_of_task!=STANDBY)PR_INZ_Service();
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <main+0x9c>)
 8001782:	7a1b      	ldrb	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f5      	beq.n	8001774 <main+0x70>
 8001788:	f7ff fbb0 	bl	8000eec <PR_INZ_Service>
	  if(Receive_Callback_Flag) UART_Service();
 800178c:	e7f2      	b.n	8001774 <main+0x70>
 800178e:	bf00      	nop
 8001790:	20000140 	.word	0x20000140
 8001794:	200000c0 	.word	0x200000c0
 8001798:	200001d8 	.word	0x200001d8
 800179c:	08006818 	.word	0x08006818
 80017a0:	20000148 	.word	0x20000148
 80017a4:	20000000 	.word	0x20000000
 80017a8:	200000c9 	.word	0x200000c9

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2230      	movs	r2, #48	; 0x30
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fafe 	bl	8005dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <SystemClock_Config+0xc8>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a26      	ldr	r2, [pc, #152]	; (8001874 <SystemClock_Config+0xc8>)
 80017da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b24      	ldr	r3, [pc, #144]	; (8001874 <SystemClock_Config+0xc8>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <SystemClock_Config+0xcc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <SystemClock_Config+0xcc>)
 80017f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <SystemClock_Config+0xcc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001810:	2310      	movs	r3, #16
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800181c:	2308      	movs	r3, #8
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001828:	2304      	movs	r3, #4
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4618      	mov	r0, r3
 8001832:	f002 f961 	bl	8003af8 <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800183c:	f000 f81e 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001840:	230f      	movs	r3, #15
 8001842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2103      	movs	r1, #3
 800185c:	4618      	mov	r0, r3
 800185e:	f002 fbc3 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001868:	f000 f808 	bl	800187c <Error_Handler>
  }
}
 800186c:	bf00      	nop
 800186e:	3750      	adds	r7, #80	; 0x50
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018c6:	2007      	movs	r0, #7
 80018c8:	f000 fb86 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 fa44 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_start_Pin);
 8001930:	2001      	movs	r0, #1
 8001932:	f001 f933 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_stop_Pin);
 800193e:	2002      	movs	r0, #2
 8001940:	f001 f92c 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_start_Pin);
 800194c:	2004      	movs	r0, #4
 800194e:	f001 f925 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_stop_Pin);
 800195a:	2008      	movs	r0, #8
 800195c:	f001 f91e 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(START_BUTTON_Pin);
 8001968:	2010      	movs	r0, #16
 800196a:	f001 f917 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <DMA1_Stream5_IRQHandler+0x10>)
 800197a:	f000 fd07 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000021c 	.word	0x2000021c

08001988 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream6_IRQHandler+0x10>)
 800198e:	f000 fcfd 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000027c 	.word	0x2000027c

0800199c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STOP_BUTTON_Pin);
 80019a0:	2040      	movs	r0, #64	; 0x40
 80019a2:	f001 f8fb 	bl	8002b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019b2:	f002 fe1a 	bl	80045ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000190 	.word	0x20000190

080019c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USART2_IRQHandler+0x10>)
 80019c6:	f003 f8d1 	bl	8004b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200001d8 	.word	0x200001d8

080019d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <_sbrk+0x5c>)
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <_sbrk+0x60>)
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <_sbrk+0x64>)
 80019f2:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <_sbrk+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d207      	bcs.n	8001a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a04:	f004 f9a0 	bl	8005d48 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	e009      	b.n	8001a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_sbrk+0x64>)
 8001a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20020000 	.word	0x20020000
 8001a34:	00000400 	.word	0x00000400
 8001a38:	2000018c 	.word	0x2000018c
 8001a3c:	200002f0 	.word	0x200002f0

08001a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <SystemInit+0x20>)
 8001a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <SystemInit+0x20>)
 8001a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <MX_TIM10_Init+0x44>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a74:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a7e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001a82:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_TIM10_Init+0x40>)
 8001a92:	f002 fcc9 	bl	8004428 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001a9c:	f7ff feee 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000190 	.word	0x20000190
 8001aa8:	40014400 	.word	0x40014400

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_TIM_Base_MspInit+0x48>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d115      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f000 fa85 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae4:	2019      	movs	r0, #25
 8001ae6:	f000 fa9e 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40014400 	.word	0x40014400
 8001af8:	40023800 	.word	0x40023800

08001afc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART2_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART2_UART_Init+0x4c>)
 8001b34:	f002 ff1e 	bl	8004974 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f7ff fe9d 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200001d8 	.word	0x200001d8
 8001b4c:	40004400 	.word	0x40004400

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_UART_MspInit+0x14c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	f040 8090 	bne.w	8001c94 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_UART_MspInit+0x150>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bac:	230c      	movs	r3, #12
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4837      	ldr	r0, [pc, #220]	; (8001ca4 <HAL_UART_MspInit+0x154>)
 8001bc8:	f000 fe4a 	bl	8002860 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bce:	4a37      	ldr	r2, [pc, #220]	; (8001cac <HAL_UART_MspInit+0x15c>)
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be0:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c00:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c0c:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001c0e:	f000 fa25 	bl	800205c <HAL_DMA_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001c18:	f7ff fe30 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_UART_MspInit+0x158>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <HAL_UART_MspInit+0x164>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c34:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c48:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c68:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c6a:	f000 f9f7 	bl	800205c <HAL_DMA_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001c74:	f7ff fe02 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_UART_MspInit+0x160>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	2026      	movs	r0, #38	; 0x26
 8001c8a:	f000 f9b0 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8e:	2026      	movs	r0, #38	; 0x26
 8001c90:	f000 f9c9 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	; 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	2000021c 	.word	0x2000021c
 8001cac:	40026088 	.word	0x40026088
 8001cb0:	2000027c 	.word	0x2000027c
 8001cb4:	400260a0 	.word	0x400260a0

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cbe:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc4:	e002      	b.n	8001ccc <LoopCopyDataInit>

08001cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cca:	3304      	adds	r3, #4

08001ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd0:	d3f9      	bcc.n	8001cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd4:	4c0b      	ldr	r4, [pc, #44]	; (8001d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd8:	e001      	b.n	8001cde <LoopFillZerobss>

08001cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cdc:	3204      	adds	r2, #4

08001cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce0:	d3fb      	bcc.n	8001cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff fead 	bl	8001a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f004 f835 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fd0b 	bl	8001704 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001cfc:	08006a00 	.word	0x08006a00
  ldr r2, =_sbss
 8001d00:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001d04:	200002f0 	.word	0x200002f0

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 f94f 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fda2 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f967 	bl	8002042 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 f92f 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000034 	.word	0x20000034
 8001da8:	2000003c 	.word	0x2000003c
 8001dac:	20000038 	.word	0x20000038

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2000003c 	.word	0x2000003c
 8001dd4:	200002dc 	.word	0x200002dc

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200002dc 	.word	0x200002dc

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000003c 	.word	0x2000003c

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff feb6 	bl	8001dd8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e099      	b.n	80021ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	e00f      	b.n	80020ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff fe9d 	bl	8001dd8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d908      	bls.n	80020ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e078      	b.n	80021ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_DMA_Init+0x158>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2b04      	cmp	r3, #4
 800214c:	d117      	bne.n	800217e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fb01 	bl	8002768 <DMA_CheckFifoParam>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fab8 	bl	80026fc <DMA_CalcBaseAndBitshift>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	f010803f 	.word	0xf010803f

080021b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Start_IT+0x26>
 80021da:	2302      	movs	r3, #2
 80021dc:	e040      	b.n	8002260 <HAL_DMA_Start_IT+0xa8>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d12f      	bne.n	8002252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa4a 	bl	80026a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0216 	orr.w	r2, r2, #22
 8002226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0208 	orr.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e005      	b.n	800225e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002276:	f7ff fdaf 	bl	8001dd8 <HAL_GetTick>
 800227a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d008      	beq.n	800229a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e052      	b.n	8002340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0216 	bic.w	r2, r2, #22
 80022a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_DMA_Abort+0x62>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	e013      	b.n	8002314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ec:	f7ff fd74 	bl	8001dd8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d90c      	bls.n	8002314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2203      	movs	r2, #3
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e015      	b.n	8002340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e4      	bne.n	80022ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d004      	beq.n	8002366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00c      	b.n	8002380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002398:	4b8e      	ldr	r3, [pc, #568]	; (80025d4 <HAL_DMA_IRQHandler+0x248>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a8e      	ldr	r2, [pc, #568]	; (80025d8 <HAL_DMA_IRQHandler+0x24c>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2208      	movs	r2, #8
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01a      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2208      	movs	r2, #8
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2201      	movs	r2, #1
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2204      	movs	r2, #4
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2210      	movs	r2, #16
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d043      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03c      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2210      	movs	r2, #16
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e01f      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e016      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2220      	movs	r2, #32
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 808f 	beq.w	800262c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8087 	beq.w	800262c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2220      	movs	r2, #32
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b05      	cmp	r3, #5
 8002534:	d136      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0216 	bic.w	r2, r2, #22
 8002544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_DMA_IRQHandler+0x1da>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	223f      	movs	r2, #63	; 0x3f
 800257c:	409a      	lsls	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d07e      	beq.n	8002698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
        }
        return;
 80025a2:	e079      	b.n	8002698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d031      	beq.n	800262c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
 80025d0:	e02c      	b.n	800262c <HAL_DMA_IRQHandler+0x2a0>
 80025d2:	bf00      	nop
 80025d4:	20000034 	.word	0x20000034
 80025d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	4798      	blx	r3
 80025ec:	e01e      	b.n	800262c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10f      	bne.n	800261c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0210 	bic.w	r2, r2, #16
 800260a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	2b00      	cmp	r3, #0
 8002632:	d032      	beq.n	800269a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d022      	beq.n	8002686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2205      	movs	r2, #5
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3301      	adds	r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	d307      	bcc.n	8002674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f2      	bne.n	8002658 <HAL_DMA_IRQHandler+0x2cc>
 8002672:	e000      	b.n	8002676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
 8002696:	e000      	b.n	800269a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002698:	bf00      	nop
    }
  }
}
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d108      	bne.n	80026e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026de:	e007      	b.n	80026f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3b10      	subs	r3, #16
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <DMA_CalcBaseAndBitshift+0x64>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <DMA_CalcBaseAndBitshift+0x68>)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d909      	bls.n	800273e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	1d1a      	adds	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	; 0x58
 800273c:	e007      	b.n	800274e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	aaaaaaab 	.word	0xaaaaaaab
 8002764:	080068b4 	.word	0x080068b4

08002768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11f      	bne.n	80027c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d856      	bhi.n	8002836 <DMA_CheckFifoParam+0xce>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <DMA_CheckFifoParam+0x28>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027b3 	.word	0x080027b3
 8002798:	080027a1 	.word	0x080027a1
 800279c:	08002837 	.word	0x08002837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d046      	beq.n	800283a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b0:	e043      	b.n	800283a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ba:	d140      	bne.n	800283e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e03d      	b.n	800283e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ca:	d121      	bne.n	8002810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d837      	bhi.n	8002842 <DMA_CheckFifoParam+0xda>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <DMA_CheckFifoParam+0x70>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027ef 	.word	0x080027ef
 80027e0:	080027e9 	.word	0x080027e9
 80027e4:	08002801 	.word	0x08002801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e030      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d025      	beq.n	8002846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e022      	b.n	8002846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002808:	d11f      	bne.n	800284a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800280e:	e01c      	b.n	800284a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d903      	bls.n	800281e <DMA_CheckFifoParam+0xb6>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d003      	beq.n	8002824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800281c:	e018      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
      break;
 8002822:	e015      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e00b      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 8002836:	bf00      	nop
 8002838:	e00a      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;
 800283a:	bf00      	nop
 800283c:	e008      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;
 800283e:	bf00      	nop
 8002840:	e006      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;
 8002842:	bf00      	nop
 8002844:	e004      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;   
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
    }
  } 
  
  return status; 
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e159      	b.n	8002b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8148 	bne.w	8002b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a2 	beq.w	8002b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_GPIO_Init+0x2f0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x202>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2f4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x1fe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_GPIO_Init+0x2f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x1fa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <HAL_GPIO_Init+0x2fc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x1f6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a45      	ldr	r2, [pc, #276]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x1f2>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f aea2 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fb6a 	bl	8001294 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e12b      	b.n	8002e36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fd20 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c30:	f001 fbd2 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8002c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a81      	ldr	r2, [pc, #516]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d807      	bhi.n	8002c50 <HAL_I2C_Init+0x84>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a80      	ldr	r2, [pc, #512]	; (8002e44 <HAL_I2C_Init+0x278>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	bf94      	ite	ls
 8002c48:	2301      	movls	r3, #1
 8002c4a:	2300      	movhi	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e006      	b.n	8002c5e <HAL_I2C_Init+0x92>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_I2C_Init+0x27c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0e7      	b.n	8002e36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a78      	ldr	r2, [pc, #480]	; (8002e4c <HAL_I2C_Init+0x280>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0c9b      	lsrs	r3, r3, #18
 8002c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a6a      	ldr	r2, [pc, #424]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d802      	bhi.n	8002ca0 <HAL_I2C_Init+0xd4>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	e009      	b.n	8002cb4 <HAL_I2C_Init+0xe8>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <HAL_I2C_Init+0x284>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	495c      	ldr	r1, [pc, #368]	; (8002e40 <HAL_I2C_Init+0x274>)
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d819      	bhi.n	8002d08 <HAL_I2C_Init+0x13c>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e59      	subs	r1, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce8:	400b      	ands	r3, r1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_I2C_Init+0x138>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1e59      	subs	r1, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d02:	e051      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e04f      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d111      	bne.n	8002d34 <HAL_I2C_Init+0x168>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e012      	b.n	8002d5a <HAL_I2C_Init+0x18e>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x196>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e022      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10e      	bne.n	8002d88 <HAL_I2C_Init+0x1bc>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e58      	subs	r0, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	e00f      	b.n	8002da8 <HAL_I2C_Init+0x1dc>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	6809      	ldr	r1, [r1, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6911      	ldr	r1, [r2, #16]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68d2      	ldr	r2, [r2, #12]
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6812      	ldr	r2, [r2, #0]
 8002de8:	430b      	orrs	r3, r1
 8002dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	000186a0 	.word	0x000186a0
 8002e44:	001e847f 	.word	0x001e847f
 8002e48:	003d08ff 	.word	0x003d08ff
 8002e4c:	431bde83 	.word	0x431bde83
 8002e50:	10624dd3 	.word	0x10624dd3

08002e54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	460b      	mov	r3, r1
 8002e62:	817b      	strh	r3, [r7, #10]
 8002e64:	4613      	mov	r3, r2
 8002e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7fe ffb6 	bl	8001dd8 <HAL_GetTick>
 8002e6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	f040 80e0 	bne.w	800303c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	4970      	ldr	r1, [pc, #448]	; (8003048 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc58 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0d3      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_I2C_Master_Transmit+0x50>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e0cc      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d007      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2221      	movs	r2, #33	; 0x21
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	893a      	ldrh	r2, [r7, #8]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a50      	ldr	r2, [pc, #320]	; (800304c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a3a      	ldr	r2, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fac2 	bl	800349c <I2C_MasterRequestWrite>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e08d      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f38:	e066      	b.n	8003008 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fcd2 	bl	80038e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d107      	bne.n	8002f62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06b      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d11b      	bne.n	8002fdc <HAL_I2C_Master_Transmit+0x188>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	6a39      	ldr	r1, [r7, #32]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fcc2 	bl	800396a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d107      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e01a      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d194      	bne.n	8002f3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	00100002 	.word	0x00100002
 800304c:	ffff0000 	.word	0xffff0000

08003050 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	460b      	mov	r3, r1
 800305e:	817b      	strh	r3, [r7, #10]
 8003060:	4613      	mov	r3, r2
 8003062:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003064:	f7fe feb8 	bl	8001dd8 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	f040 820b 	bne.w	800348e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	497c      	ldr	r1, [pc, #496]	; (8003274 <HAL_I2C_Master_Receive+0x224>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 fb5a 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	e1fe      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_I2C_Master_Receive+0x50>
 800309c:	2302      	movs	r3, #2
 800309e:	e1f7      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d007      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2222      	movs	r2, #34	; 0x22
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2210      	movs	r2, #16
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	893a      	ldrh	r2, [r7, #8]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_I2C_Master_Receive+0x228>)
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003108:	8979      	ldrh	r1, [r7, #10]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa46 	bl	80035a0 <I2C_MasterRequestRead>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e1b8      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d113      	bne.n	800314e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e18c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b01      	cmp	r3, #1
 8003154:	d11b      	bne.n	800318e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e16c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b02      	cmp	r3, #2
 8003194:	d11b      	bne.n	80031ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	e14c      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031f4:	e138      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	f200 80f1 	bhi.w	80033e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b01      	cmp	r3, #1
 8003206:	d123      	bne.n	8003250 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fbed 	bl	80039ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e139      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800324e:	e10b      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b02      	cmp	r3, #2
 8003256:	d14e      	bne.n	80032f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	2200      	movs	r2, #0
 8003260:	4906      	ldr	r1, [pc, #24]	; (800327c <HAL_I2C_Master_Receive+0x22c>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fa6a 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e10e      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
 8003272:	bf00      	nop
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000
 800327c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f4:	e0b8      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2200      	movs	r2, #0
 80032fe:	4966      	ldr	r1, [pc, #408]	; (8003498 <HAL_I2C_Master_Receive+0x448>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fa1b 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0bf      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003358:	2200      	movs	r2, #0
 800335a:	494f      	ldr	r1, [pc, #316]	; (8003498 <HAL_I2C_Master_Receive+0x448>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f9ed 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e091      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e0:	e042      	b.n	8003468 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fb00 	bl	80039ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e04c      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d118      	bne.n	8003468 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f aec2 	bne.w	80031f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010004 	.word	0x00010004

0800349c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	460b      	mov	r3, r1
 80034aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d006      	beq.n	80034c6 <I2C_MasterRequestWrite+0x2a>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <I2C_MasterRequestWrite+0x2a>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c4:	d108      	bne.n	80034d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e00b      	b.n	80034f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	2b12      	cmp	r3, #18
 80034de:	d107      	bne.n	80034f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f91d 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d103      	bne.n	8003520 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e035      	b.n	8003590 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800352c:	d108      	bne.n	8003540 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	e01b      	b.n	8003578 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003540:	897b      	ldrh	r3, [r7, #10]
 8003542:	11db      	asrs	r3, r3, #7
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 0306 	and.w	r3, r3, #6
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f063 030f 	orn	r3, r3, #15
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <I2C_MasterRequestWrite+0xfc>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f943 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e010      	b.n	8003590 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4907      	ldr	r1, [pc, #28]	; (800359c <I2C_MasterRequestWrite+0x100>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f933 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00010008 	.word	0x00010008
 800359c:	00010002 	.word	0x00010002

080035a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d006      	beq.n	80035da <I2C_MasterRequestRead+0x3a>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d003      	beq.n	80035da <I2C_MasterRequestRead+0x3a>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035d8:	d108      	bne.n	80035ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e00b      	b.n	8003604 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d107      	bne.n	8003604 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f893 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362a:	d103      	bne.n	8003634 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e079      	b.n	800372c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003640:	d108      	bne.n	8003654 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	611a      	str	r2, [r3, #16]
 8003652:	e05f      	b.n	8003714 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	11db      	asrs	r3, r3, #7
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f003 0306 	and.w	r3, r3, #6
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f063 030f 	orn	r3, r3, #15
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4930      	ldr	r1, [pc, #192]	; (8003734 <I2C_MasterRequestRead+0x194>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f8b9 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e054      	b.n	800372c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4929      	ldr	r1, [pc, #164]	; (8003738 <I2C_MasterRequestRead+0x198>)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8a9 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e044      	b.n	800372c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f831 	bl	800373c <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ee:	d103      	bne.n	80036f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e017      	b.n	800372c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036fc:	897b      	ldrh	r3, [r7, #10]
 80036fe:	11db      	asrs	r3, r3, #7
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0306 	and.w	r3, r3, #6
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f063 030e 	orn	r3, r3, #14
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4907      	ldr	r1, [pc, #28]	; (8003738 <I2C_MasterRequestRead+0x198>)
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f865 	bl	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00010008 	.word	0x00010008
 8003738:	00010002 	.word	0x00010002

0800373c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374c:	e025      	b.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d021      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003756:	f7fe fb3f 	bl	8001dd8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d302      	bcc.n	800376c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e023      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10d      	bne.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	e00c      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d0b6      	beq.n	800374e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f8:	e051      	b.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003808:	d123      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e046      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d021      	beq.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe fabd 	bl	8001dd8 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e020      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10c      	bne.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e00b      	b.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d18d      	bne.n	80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f4:	e02d      	b.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f8ce 	bl	8003a98 <I2C_IsAcknowledgeFailed>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e02d      	b.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d021      	beq.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fa63 	bl	8001dd8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e007      	b.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d1ca      	bne.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003976:	e02d      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f88d 	bl	8003a98 <I2C_IsAcknowledgeFailed>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e02d      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d021      	beq.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003990:	f7fe fa22 	bl	8001dd8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d302      	bcc.n	80039a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e007      	b.n	80039e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d1ca      	bne.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039f8:	e042      	b.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d119      	bne.n	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0210 	mvn.w	r2, #16
 8003a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e029      	b.n	8003a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fe f9cc 	bl	8001dd8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d1b5      	bne.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d11b      	bne.n	8003ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0204 	orr.w	r2, r3, #4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e267      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d075      	beq.n	8003c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b16:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b22:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d112      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2e:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05b      	beq.n	8003c00 <HAL_RCC_OscConfig+0x108>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d157      	bne.n	8003c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e242      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d106      	bne.n	8003b6c <HAL_RCC_OscConfig+0x74>
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a75      	ldr	r2, [pc, #468]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e01d      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x98>
 8003b76:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a6f      	ldr	r2, [pc, #444]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b6d      	ldr	r3, [pc, #436]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6c      	ldr	r2, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e00b      	b.n	8003ba8 <HAL_RCC_OscConfig+0xb0>
 8003b90:	4b69      	ldr	r3, [pc, #420]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a68      	ldr	r2, [pc, #416]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f912 	bl	8001dd8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe f90e 	bl	8001dd8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	; 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e207      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xc0>
 8003bd6:	e014      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe f8fe 	bl	8001dd8 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe f8fa 	bl	8001dd8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1f3      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0xe8>
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d063      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d11c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b44      	ldr	r3, [pc, #272]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	4b41      	ldr	r3, [pc, #260]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d001      	beq.n	8003c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e1c7      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4937      	ldr	r1, [pc, #220]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	e03a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c68:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe f8b3 	bl	8001dd8 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c76:	f7fe f8af 	bl	8001dd8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1a8      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4925      	ldr	r1, [pc, #148]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_OscConfig+0x244>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f892 	bl	8001dd8 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb8:	f7fe f88e 	bl	8001dd8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e187      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d016      	beq.n	8003d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fe f872 	bl	8001dd8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f86e 	bl	8001dd8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e167      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x200>
 8003d16:	e01b      	b.n	8003d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_OscConfig+0x248>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe f85b 	bl	8001dd8 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e00e      	b.n	8003d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe f857 	bl	8001dd8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d907      	bls.n	8003d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e150      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470000 	.word	0x42470000
 8003d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1ea      	bne.n	8003d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8097 	beq.w	8003e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a7c      	ldr	r2, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b7a      	ldr	r3, [pc, #488]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b77      	ldr	r3, [pc, #476]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a73      	ldr	r2, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fe f817 	bl	8001dd8 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe f813 	bl	8001dd8 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e10c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x474>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2ea>
 8003dd4:	4b64      	ldr	r3, [pc, #400]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	e01c      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x30c>
 8003dea:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a5e      	ldr	r2, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df0:	f043 0304 	orr.w	r3, r3, #4
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0x324>
 8003e04:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a57      	ldr	r2, [pc, #348]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd ffd8 	bl	8001dd8 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd ffd4 	bl	8001dd8 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0cb      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4b49      	ldr	r3, [pc, #292]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ee      	beq.n	8003e2c <HAL_RCC_OscConfig+0x334>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fd ffc2 	bl	8001dd8 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fd ffbe 	bl	8001dd8 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0b5      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6e:	4b3e      	ldr	r3, [pc, #248]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1ee      	bne.n	8003e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a1 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e96:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d05c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d141      	bne.n	8003f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd ff92 	bl	8001dd8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fd ff8e 	bl	8001dd8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e087      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eca:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	491b      	ldr	r1, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd ff67 	bl	8001dd8 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd ff63 	bl	8001dd8 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e05c      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x416>
 8003f2c:	e054      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd ff50 	bl	8001dd8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd ff4c 	bl	8001dd8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e045      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x444>
 8003f5a:	e03d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e038      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x4ec>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d121      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11a      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0cc      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b68      	ldr	r3, [pc, #416]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d90c      	bls.n	8004024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b63      	ldr	r3, [pc, #396]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b8      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d020      	beq.n	8004072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800403c:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a58      	ldr	r2, [pc, #352]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004054:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a52      	ldr	r2, [pc, #328]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800405e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004060:	4b50      	ldr	r3, [pc, #320]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	494d      	ldr	r1, [pc, #308]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	4313      	orrs	r3, r2
 8004070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d044      	beq.n	8004108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d119      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e07f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e06f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e067      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4934      	ldr	r1, [pc, #208]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d8:	f7fd fe7e 	bl	8001dd8 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fd fe7a 	bl	8001dd8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e04f      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d20c      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e032      	b.n	8004196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4916      	ldr	r1, [pc, #88]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800416e:	f000 f821 	bl	80041b4 <HAL_RCC_GetSysClockFreq>
 8004172:	4602      	mov	r2, r0
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	490a      	ldr	r1, [pc, #40]	; (80041a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004180:	5ccb      	ldrb	r3, [r1, r3]
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fdde 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00
 80041a4:	40023800 	.word	0x40023800
 80041a8:	0800689c 	.word	0x0800689c
 80041ac:	20000034 	.word	0x20000034
 80041b0:	20000038 	.word	0x20000038

080041b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b8:	b094      	sub	sp, #80	; 0x50
 80041ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	647b      	str	r3, [r7, #68]	; 0x44
 80041c0:	2300      	movs	r3, #0
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	2300      	movs	r3, #0
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041cc:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d00d      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x40>
 80041d8:	2b08      	cmp	r3, #8
 80041da:	f200 80e1 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x34>
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x3a>
 80041e6:	e0db      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b73      	ldr	r3, [pc, #460]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041ec:	e0db      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ee:	4b73      	ldr	r3, [pc, #460]	; (80043bc <HAL_RCC_GetSysClockFreq+0x208>)
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f2:	e0d8      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
 8004214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	633b      	str	r3, [r7, #48]	; 0x30
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004226:	4622      	mov	r2, r4
 8004228:	462b      	mov	r3, r5
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	0159      	lsls	r1, r3, #5
 8004234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004238:	0150      	lsls	r0, r2, #5
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	4621      	mov	r1, r4
 8004240:	1a51      	subs	r1, r2, r1
 8004242:	6139      	str	r1, [r7, #16]
 8004244:	4629      	mov	r1, r5
 8004246:	eb63 0301 	sbc.w	r3, r3, r1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004258:	4659      	mov	r1, fp
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004262:	4651      	mov	r1, sl
 8004264:	018a      	lsls	r2, r1, #6
 8004266:	4651      	mov	r1, sl
 8004268:	ebb2 0801 	subs.w	r8, r2, r1
 800426c:	4659      	mov	r1, fp
 800426e:	eb63 0901 	sbc.w	r9, r3, r1
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004286:	4690      	mov	r8, r2
 8004288:	4699      	mov	r9, r3
 800428a:	4623      	mov	r3, r4
 800428c:	eb18 0303 	adds.w	r3, r8, r3
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	462b      	mov	r3, r5
 8004294:	eb49 0303 	adc.w	r3, r9, r3
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a6:	4629      	mov	r1, r5
 80042a8:	024b      	lsls	r3, r1, #9
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b0:	4621      	mov	r1, r4
 80042b2:	024a      	lsls	r2, r1, #9
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c4:	f7fb ffdc 	bl	8000280 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d0:	e058      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d2:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	2200      	movs	r2, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	4611      	mov	r1, r2
 80042de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
 80042e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fe:	0150      	lsls	r0, r2, #5
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4641      	mov	r1, r8
 8004306:	ebb2 0a01 	subs.w	sl, r2, r1
 800430a:	4649      	mov	r1, r9
 800430c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800431c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004324:	ebb2 040a 	subs.w	r4, r2, sl
 8004328:	eb63 050b 	sbc.w	r5, r3, fp
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	00eb      	lsls	r3, r5, #3
 8004336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433a:	00e2      	lsls	r2, r4, #3
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	4643      	mov	r3, r8
 8004342:	18e3      	adds	r3, r4, r3
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	464b      	mov	r3, r9
 8004348:	eb45 0303 	adc.w	r3, r5, r3
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435a:	4629      	mov	r1, r5
 800435c:	028b      	lsls	r3, r1, #10
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004364:	4621      	mov	r1, r4
 8004366:	028a      	lsls	r2, r1, #10
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	2200      	movs	r2, #0
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	61fa      	str	r2, [r7, #28]
 8004374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004378:	f7fb ff82 	bl	8000280 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3750      	adds	r7, #80	; 0x50
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	007a1200 	.word	0x007a1200

080043c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000034 	.word	0x20000034

080043d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043dc:	f7ff fff0 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 80043e0:	4602      	mov	r2, r0
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	0a9b      	lsrs	r3, r3, #10
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	4903      	ldr	r1, [pc, #12]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ee:	5ccb      	ldrb	r3, [r1, r3]
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40023800 	.word	0x40023800
 80043fc:	080068ac 	.word	0x080068ac

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004404:	f7ff ffdc 	bl	80043c0 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0b5b      	lsrs	r3, r3, #13
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	080068ac 	.word	0x080068ac

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e041      	b.n	80044be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fb2c 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 f9f0 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e044      	b.n	800456a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_TIM_Base_Start_IT+0xb0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d013      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_TIM_Base_Start_IT+0xb4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_TIM_Base_Start_IT+0xb8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_TIM_Base_Start_IT+0xbc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x6c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIM_Base_Start_IT+0xc0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b06      	cmp	r3, #6
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	e007      	b.n	8004568 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000

0800458c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10f      	bne.n	80045d4 <HAL_TIM_Base_Stop_IT+0x48>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	f240 4344 	movw	r3, #1092	; 0x444
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_Base_Stop_IT+0x48>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d122      	bne.n	8004646 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d11b      	bne.n	8004646 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0202 	mvn.w	r2, #2
 8004616:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8ee 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004632:	e005      	b.n	8004640 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8e0 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f8f1 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d122      	bne.n	800469a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d11b      	bne.n	800469a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0204 	mvn.w	r2, #4
 800466a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8c4 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 8004686:	e005      	b.n	8004694 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8b6 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8c7 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d122      	bne.n	80046ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d11b      	bne.n	80046ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0208 	mvn.w	r2, #8
 80046be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f89a 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80046da:	e005      	b.n	80046e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f88c 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f89d 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d122      	bne.n	8004742 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b10      	cmp	r3, #16
 8004708:	d11b      	bne.n	8004742 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f06f 0210 	mvn.w	r2, #16
 8004712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2208      	movs	r2, #8
 8004718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f870 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 800472e:	e005      	b.n	800473c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f862 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f873 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10e      	bne.n	800476e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0201 	mvn.w	r2, #1
 8004766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fc ffad 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d10e      	bne.n	800479a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d107      	bne.n	800479a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8e3 	bl	8004960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d10e      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d107      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f838 	bl	8004836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d10e      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0220 	mvn.w	r2, #32
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f8ad 	bl	800494c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a34      	ldr	r2, [pc, #208]	; (8004930 <TIM_Base_SetConfig+0xe4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00f      	beq.n	8004884 <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d00b      	beq.n	8004884 <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a31      	ldr	r2, [pc, #196]	; (8004934 <TIM_Base_SetConfig+0xe8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a30      	ldr	r2, [pc, #192]	; (8004938 <TIM_Base_SetConfig+0xec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <TIM_Base_SetConfig+0xf0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a25      	ldr	r2, [pc, #148]	; (8004930 <TIM_Base_SetConfig+0xe4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <TIM_Base_SetConfig+0xe8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a21      	ldr	r2, [pc, #132]	; (8004938 <TIM_Base_SetConfig+0xec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <TIM_Base_SetConfig+0xf0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <TIM_Base_SetConfig+0xf4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <TIM_Base_SetConfig+0xf8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <TIM_Base_SetConfig+0xfc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <TIM_Base_SetConfig+0xe4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d103      	bne.n	800491c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	615a      	str	r2, [r3, #20]
}
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e03f      	b.n	8004a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fd f8d8 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 ff4d 	bl	8005858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	; 0x30
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d165      	bne.n	8004af6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_UART_Transmit_DMA+0x26>
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e05e      	b.n	8004af8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Transmit_DMA+0x38>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e057      	b.n	8004af8 <HAL_UART_Transmit_DMA+0xe8>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2221      	movs	r2, #33	; 0x21
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_UART_Transmit_DMA+0xf0>)
 8004a76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <HAL_UART_Transmit_DMA+0xf4>)
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <HAL_UART_Transmit_DMA+0xf8>)
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f7fd fb86 	bl	80021b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3314      	adds	r3, #20
 8004ac4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ade:	627a      	str	r2, [r7, #36]	; 0x24
 8004ae0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6a39      	ldr	r1, [r7, #32]
 8004ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e5      	bne.n	8004abe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004af6:	2302      	movs	r3, #2
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3730      	adds	r7, #48	; 0x30
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	080050f1 	.word	0x080050f1
 8004b04:	0800518b 	.word	0x0800518b
 8004b08:	08005303 	.word	0x08005303

08004b0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d11d      	bne.n	8004b62 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_UART_Receive_DMA+0x26>
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e016      	b.n	8004b64 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Receive_DMA+0x38>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e00f      	b.n	8004b64 <HAL_UART_Receive_DMA+0x58>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	461a      	mov	r2, r3
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fc1d 	bl	8005398 <UART_Start_Receive_DMA>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0ba      	sub	sp, #232	; 0xe8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x66>
 8004bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fd89 	bl	80056e2 <UART_Receive_IT>
      return;
 8004bd0:	e256      	b.n	8005080 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80de 	beq.w	8004d98 <HAL_UART_IRQHandler+0x22c>
 8004bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80d1 	beq.w	8004d98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_UART_IRQHandler+0xae>
 8004c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_UART_IRQHandler+0xd2>
 8004c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f043 0202 	orr.w	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0xf6>
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0204 	orr.w	r2, r3, #4
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <HAL_UART_IRQHandler+0x126>
 8004c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0208 	orr.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 81ed 	beq.w	8005076 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_UART_IRQHandler+0x14e>
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd14 	bl	80056e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x17a>
 8004cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d04f      	beq.n	8004d86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fc1c 	bl	8005524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d141      	bne.n	8004d7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3314      	adds	r3, #20
 8004d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3314      	adds	r3, #20
 8004d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1d9      	bne.n	8004cfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d013      	beq.n	8004d76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	4a7d      	ldr	r2, [pc, #500]	; (8004f48 <HAL_UART_IRQHandler+0x3dc>)
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fd faf4 	bl	8002348 <HAL_DMA_Abort_IT>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	4610      	mov	r0, r2
 8004d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	e00e      	b.n	8004d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9a4 	bl	80050c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d7c:	e00a      	b.n	8004d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a0 	bl	80050c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d84:	e006      	b.n	8004d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f99c 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d92:	e170      	b.n	8005076 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	bf00      	nop
    return;
 8004d96:	e16e      	b.n	8005076 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f040 814a 	bne.w	8005036 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8143 	beq.w	8005036 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 813c 	beq.w	8005036 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	f040 80b4 	bne.w	8004f4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8140 	beq.w	800507a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e02:	429a      	cmp	r2, r3
 8004e04:	f080 8139 	bcs.w	800507a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	f000 8088 	beq.w	8004f2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1d9      	bne.n	8004e1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e1      	bne.n	8004e6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ecc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f10:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e3      	bne.n	8004eec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fd f99d 	bl	8002268 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8ca 	bl	80050d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f44:	e099      	b.n	800507a <HAL_UART_IRQHandler+0x50e>
 8004f46:	bf00      	nop
 8004f48:	080055eb 	.word	0x080055eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 808b 	beq.w	800507e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8086 	beq.w	800507e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f96:	647a      	str	r2, [r7, #68]	; 0x44
 8004f98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3314      	adds	r3, #20
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fce:	633a      	str	r2, [r7, #48]	; 0x30
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e3      	bne.n	8004faa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	e853 3f00 	ldrex	r3, [r3]
 8004ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0310 	bic.w	r3, r3, #16
 8005006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005014:	61fa      	str	r2, [r7, #28]
 8005016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	69b9      	ldr	r1, [r7, #24]
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	617b      	str	r3, [r7, #20]
   return(result);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e3      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f852 	bl	80050d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005034:	e023      	b.n	800507e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_UART_IRQHandler+0x4ea>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fadf 	bl	8005612 <UART_Transmit_IT>
    return;
 8005054:	e014      	b.n	8005080 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <HAL_UART_IRQHandler+0x514>
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb1f 	bl	80056b2 <UART_EndTransmit_IT>
    return;
 8005074:	e004      	b.n	8005080 <HAL_UART_IRQHandler+0x514>
    return;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <HAL_UART_IRQHandler+0x514>
      return;
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <HAL_UART_IRQHandler+0x514>
      return;
 800507e:	bf00      	nop
  }
}
 8005080:	37e8      	adds	r7, #232	; 0xe8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop

08005088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b090      	sub	sp, #64	; 0x40
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d137      	bne.n	800517c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800510c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510e:	2200      	movs	r2, #0
 8005110:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3314      	adds	r3, #20
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	623b      	str	r3, [r7, #32]
   return(result);
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
 800512a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005132:	633a      	str	r2, [r7, #48]	; 0x30
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e5      	bne.n	8005112 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60fb      	str	r3, [r7, #12]
   return(result);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515c:	637b      	str	r3, [r7, #52]	; 0x34
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005166:	61fa      	str	r2, [r7, #28]
 8005168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	69b9      	ldr	r1, [r7, #24]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	617b      	str	r3, [r7, #20]
   return(result);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800517a:	e002      	b.n	8005182 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800517c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800517e:	f7ff ff83 	bl	8005088 <HAL_UART_TxCpltCallback>
}
 8005182:	bf00      	nop
 8005184:	3740      	adds	r7, #64	; 0x40
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ff7f 	bl	800509c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b09c      	sub	sp, #112	; 0x70
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d172      	bne.n	80052a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	2200      	movs	r2, #0
 80051c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051de:	66bb      	str	r3, [r7, #104]	; 0x68
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80051ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3314      	adds	r3, #20
 8005202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	667b      	str	r3, [r7, #100]	; 0x64
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3314      	adds	r3, #20
 800521a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800521c:	647a      	str	r2, [r7, #68]	; 0x44
 800521e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3314      	adds	r3, #20
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	623b      	str	r3, [r7, #32]
   return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	663b      	str	r3, [r7, #96]	; 0x60
 8005248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3314      	adds	r3, #20
 800524e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005250:	633a      	str	r2, [r7, #48]	; 0x30
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	60fb      	str	r3, [r7, #12]
   return(result);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0310 	bic.w	r3, r3, #16
 800528a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005294:	61fa      	str	r2, [r7, #28]
 8005296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	69b9      	ldr	r1, [r7, #24]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	617b      	str	r3, [r7, #20]
   return(result);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e5      	bne.n	8005274 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d106      	bne.n	80052be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052b4:	4619      	mov	r1, r3
 80052b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052b8:	f7ff ff0e 	bl	80050d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052bc:	e002      	b.n	80052c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80052be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052c0:	f7fb fc74 	bl	8000bac <HAL_UART_RxCpltCallback>
}
 80052c4:	bf00      	nop
 80052c6:	3770      	adds	r7, #112	; 0x70
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	4619      	mov	r1, r3
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fef3 	bl	80050d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f2:	e002      	b.n	80052fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fedb 	bl	80050b0 <HAL_UART_RxHalfCpltCallback>
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b21      	cmp	r3, #33	; 0x21
 8005334:	d108      	bne.n	8005348 <UART_DMAError+0x46>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2200      	movs	r2, #0
 8005340:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005342:	68b8      	ldr	r0, [r7, #8]
 8005344:	f000 f8c6 	bl	80054d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b22      	cmp	r3, #34	; 0x22
 8005368:	d108      	bne.n	800537c <UART_DMAError+0x7a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005376:	68b8      	ldr	r0, [r7, #8]
 8005378:	f000 f8d4 	bl	8005524 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	f043 0210 	orr.w	r2, r3, #16
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f7ff fe9b 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b098      	sub	sp, #96	; 0x60
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	; 0x22
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <UART_Start_Receive_DMA+0x130>)
 80053c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	4a3f      	ldr	r2, [pc, #252]	; (80054cc <UART_Start_Receive_DMA+0x134>)
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	4a3e      	ldr	r2, [pc, #248]	; (80054d0 <UART_Start_Receive_DMA+0x138>)
 80053d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80053e0:	f107 0308 	add.w	r3, r7, #8
 80053e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f7fc fede 	bl	80021b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d019      	beq.n	8005456 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	65bb      	str	r3, [r7, #88]	; 0x58
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005442:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005444:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	657b      	str	r3, [r7, #84]	; 0x54
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005476:	63ba      	str	r2, [r7, #56]	; 0x38
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800547c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	617b      	str	r3, [r7, #20]
   return(result);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054aa:	627a      	str	r2, [r7, #36]	; 0x24
 80054ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6a39      	ldr	r1, [r7, #32]
 80054b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3760      	adds	r7, #96	; 0x60
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	080051a7 	.word	0x080051a7
 80054cc:	080052cd 	.word	0x080052cd
 80054d0:	08005303 	.word	0x08005303

080054d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	61ba      	str	r2, [r7, #24]
 80054fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005518:	bf00      	nop
 800551a:	3724      	adds	r7, #36	; 0x24
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b095      	sub	sp, #84	; 0x54
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800554c:	643a      	str	r2, [r7, #64]	; 0x40
 800554e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3314      	adds	r3, #20
 8005566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e5      	bne.n	8005560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	2b01      	cmp	r3, #1
 800559a:	d119      	bne.n	80055d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 0310 	bic.w	r3, r3, #16
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055bc:	61ba      	str	r2, [r7, #24]
 80055be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055de:	bf00      	nop
 80055e0:	3754      	adds	r7, #84	; 0x54
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fd5d 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b21      	cmp	r3, #33	; 0x21
 8005624:	d13e      	bne.n	80056a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562e:	d114      	bne.n	800565a <UART_Transmit_IT+0x48>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d110      	bne.n	800565a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	621a      	str	r2, [r3, #32]
 8005658:	e008      	b.n	800566c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6211      	str	r1, [r2, #32]
 8005664:	781a      	ldrb	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4619      	mov	r1, r3
 800567a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800568e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fcd8 	bl	8005088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08c      	sub	sp, #48	; 0x30
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b22      	cmp	r3, #34	; 0x22
 80056f4:	f040 80ab 	bne.w	800584e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d117      	bne.n	8005732 <UART_Receive_IT+0x50>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d113      	bne.n	8005732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	b29a      	uxth	r2, r3
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	1c9a      	adds	r2, r3, #2
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28
 8005730:	e026      	b.n	8005780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005744:	d007      	beq.n	8005756 <UART_Receive_IT+0x74>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <UART_Receive_IT+0x82>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e008      	b.n	8005776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005770:	b2da      	uxtb	r2, r3
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29b      	uxth	r3, r3
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4619      	mov	r1, r3
 800578e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005790:	2b00      	cmp	r3, #0
 8005792:	d15a      	bne.n	800584a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0220 	bic.w	r2, r2, #32
 80057a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d135      	bne.n	8005840 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f023 0310 	bic.w	r3, r3, #16
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	623a      	str	r2, [r7, #32]
 80057fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	69f9      	ldr	r1, [r7, #28]
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	61bb      	str	r3, [r7, #24]
   return(result);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d10a      	bne.n	8005832 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005836:	4619      	mov	r1, r3
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fc4d 	bl	80050d8 <HAL_UARTEx_RxEventCallback>
 800583e:	e002      	b.n	8005846 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fb f9b3 	bl	8000bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e002      	b.n	8005850 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800584e:	2302      	movs	r3, #2
  }
}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	; 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b0c0      	sub	sp, #256	; 0x100
 800585e:	af00      	add	r7, sp, #0
 8005860:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	68d9      	ldr	r1, [r3, #12]
 8005876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	ea40 0301 	orr.w	r3, r0, r1
 8005880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	431a      	orrs	r2, r3
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058b0:	f021 010c 	bic.w	r1, r1, #12
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058be:	430b      	orrs	r3, r1
 80058c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	6999      	ldr	r1, [r3, #24]
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	ea40 0301 	orr.w	r3, r0, r1
 80058de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b8f      	ldr	r3, [pc, #572]	; (8005b24 <UART_SetConfig+0x2cc>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d005      	beq.n	80058f8 <UART_SetConfig+0xa0>
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4b8d      	ldr	r3, [pc, #564]	; (8005b28 <UART_SetConfig+0x2d0>)
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d104      	bne.n	8005902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f8:	f7fe fd82 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 80058fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005900:	e003      	b.n	800590a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005902:	f7fe fd69 	bl	80043d8 <HAL_RCC_GetPCLK1Freq>
 8005906:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005914:	f040 810c 	bne.w	8005b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591c:	2200      	movs	r2, #0
 800591e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005922:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800592a:	4622      	mov	r2, r4
 800592c:	462b      	mov	r3, r5
 800592e:	1891      	adds	r1, r2, r2
 8005930:	65b9      	str	r1, [r7, #88]	; 0x58
 8005932:	415b      	adcs	r3, r3
 8005934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800593a:	4621      	mov	r1, r4
 800593c:	eb12 0801 	adds.w	r8, r2, r1
 8005940:	4629      	mov	r1, r5
 8005942:	eb43 0901 	adc.w	r9, r3, r1
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800595a:	4690      	mov	r8, r2
 800595c:	4699      	mov	r9, r3
 800595e:	4623      	mov	r3, r4
 8005960:	eb18 0303 	adds.w	r3, r8, r3
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005968:	462b      	mov	r3, r5
 800596a:	eb49 0303 	adc.w	r3, r9, r3
 800596e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800597e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005986:	460b      	mov	r3, r1
 8005988:	18db      	adds	r3, r3, r3
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
 800598c:	4613      	mov	r3, r2
 800598e:	eb42 0303 	adc.w	r3, r2, r3
 8005992:	657b      	str	r3, [r7, #84]	; 0x54
 8005994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800599c:	f7fa fc70 	bl	8000280 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <UART_SetConfig+0x2d4>)
 80059a6:	fba3 2302 	umull	r2, r3, r3, r2
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	011c      	lsls	r4, r3, #4
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	1891      	adds	r1, r2, r2
 80059c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80059c8:	415b      	adcs	r3, r3
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059d0:	4641      	mov	r1, r8
 80059d2:	eb12 0a01 	adds.w	sl, r2, r1
 80059d6:	4649      	mov	r1, r9
 80059d8:	eb43 0b01 	adc.w	fp, r3, r1
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059f0:	4692      	mov	sl, r2
 80059f2:	469b      	mov	fp, r3
 80059f4:	4643      	mov	r3, r8
 80059f6:	eb1a 0303 	adds.w	r3, sl, r3
 80059fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059fe:	464b      	mov	r3, r9
 8005a00:	eb4b 0303 	adc.w	r3, fp, r3
 8005a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	18db      	adds	r3, r3, r3
 8005a20:	643b      	str	r3, [r7, #64]	; 0x40
 8005a22:	4613      	mov	r3, r2
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a32:	f7fa fc25 	bl	8000280 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <UART_SetConfig+0x2d4>)
 8005a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2264      	movs	r2, #100	; 0x64
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	1acb      	subs	r3, r1, r3
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a52:	4b36      	ldr	r3, [pc, #216]	; (8005b2c <UART_SetConfig+0x2d4>)
 8005a54:	fba3 2302 	umull	r2, r3, r3, r2
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a60:	441c      	add	r4, r3
 8005a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a74:	4642      	mov	r2, r8
 8005a76:	464b      	mov	r3, r9
 8005a78:	1891      	adds	r1, r2, r2
 8005a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a7c:	415b      	adcs	r3, r3
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a84:	4641      	mov	r1, r8
 8005a86:	1851      	adds	r1, r2, r1
 8005a88:	6339      	str	r1, [r7, #48]	; 0x30
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	414b      	adcs	r3, r1
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	00cb      	lsls	r3, r1, #3
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa6:	4651      	mov	r1, sl
 8005aa8:	00ca      	lsls	r2, r1, #3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4619      	mov	r1, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab8:	464b      	mov	r3, r9
 8005aba:	460a      	mov	r2, r1
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad8:	460b      	mov	r3, r1
 8005ada:	18db      	adds	r3, r3, r3
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ade:	4613      	mov	r3, r2
 8005ae0:	eb42 0303 	adc.w	r3, r2, r3
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aee:	f7fa fbc7 	bl	8000280 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <UART_SetConfig+0x2d4>)
 8005af8:	fba3 1302 	umull	r1, r3, r3, r2
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	2164      	movs	r1, #100	; 0x64
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	3332      	adds	r3, #50	; 0x32
 8005b0a:	4a08      	ldr	r2, [pc, #32]	; (8005b2c <UART_SetConfig+0x2d4>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	f003 0207 	and.w	r2, r3, #7
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4422      	add	r2, r4
 8005b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b20:	e105      	b.n	8005d2e <UART_SetConfig+0x4d6>
 8005b22:	bf00      	nop
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40011400 	.word	0x40011400
 8005b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b42:	4642      	mov	r2, r8
 8005b44:	464b      	mov	r3, r9
 8005b46:	1891      	adds	r1, r2, r2
 8005b48:	6239      	str	r1, [r7, #32]
 8005b4a:	415b      	adcs	r3, r3
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b52:	4641      	mov	r1, r8
 8005b54:	1854      	adds	r4, r2, r1
 8005b56:	4649      	mov	r1, r9
 8005b58:	eb43 0501 	adc.w	r5, r3, r1
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	00eb      	lsls	r3, r5, #3
 8005b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6a:	00e2      	lsls	r2, r4, #3
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	461d      	mov	r5, r3
 8005b70:	4643      	mov	r3, r8
 8005b72:	18e3      	adds	r3, r4, r3
 8005b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b78:	464b      	mov	r3, r9
 8005b7a:	eb45 0303 	adc.w	r3, r5, r3
 8005b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	008b      	lsls	r3, r1, #2
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba8:	4621      	mov	r1, r4
 8005baa:	008a      	lsls	r2, r1, #2
 8005bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bb0:	f7fa fb66 	bl	8000280 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <UART_SetConfig+0x4e4>)
 8005bba:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	011c      	lsls	r4, r3, #4
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	61b9      	str	r1, [r7, #24]
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be4:	4641      	mov	r1, r8
 8005be6:	1851      	adds	r1, r2, r1
 8005be8:	6139      	str	r1, [r7, #16]
 8005bea:	4649      	mov	r1, r9
 8005bec:	414b      	adcs	r3, r1
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	00cb      	lsls	r3, r1, #3
 8005c00:	4651      	mov	r1, sl
 8005c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c06:	4651      	mov	r1, sl
 8005c08:	00ca      	lsls	r2, r1, #3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4642      	mov	r2, r8
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c18:	464b      	mov	r3, r9
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	008b      	lsls	r3, r1, #2
 8005c40:	4641      	mov	r1, r8
 8005c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c46:	4641      	mov	r1, r8
 8005c48:	008a      	lsls	r2, r1, #2
 8005c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c4e:	f7fa fb17 	bl	8000280 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <UART_SetConfig+0x4e4>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	; 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <UART_SetConfig+0x4e4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c76:	441c      	add	r4, r3
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	677a      	str	r2, [r7, #116]	; 0x74
 8005c82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c86:	4642      	mov	r2, r8
 8005c88:	464b      	mov	r3, r9
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c96:	4641      	mov	r1, r8
 8005c98:	1851      	adds	r1, r2, r1
 8005c9a:	6039      	str	r1, [r7, #0]
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	414b      	adcs	r3, r1
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cae:	4659      	mov	r1, fp
 8005cb0:	00cb      	lsls	r3, r1, #3
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb8:	4651      	mov	r1, sl
 8005cba:	00ca      	lsls	r2, r1, #3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc8:	464b      	mov	r3, r9
 8005cca:	460a      	mov	r2, r1
 8005ccc:	eb42 0303 	adc.w	r3, r2, r3
 8005cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	663b      	str	r3, [r7, #96]	; 0x60
 8005cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cea:	4649      	mov	r1, r9
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	4641      	mov	r1, r8
 8005cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	008a      	lsls	r2, r1, #2
 8005cf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cfc:	f7fa fac0 	bl	8000280 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <UART_SetConfig+0x4e4>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <UART_SetConfig+0x4e4>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 020f 	and.w	r2, r3, #15
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4422      	add	r2, r4
 8005d2c:	609a      	str	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3a:	bf00      	nop
 8005d3c:	51eb851f 	.word	0x51eb851f

08005d40 <atoi>:
 8005d40:	220a      	movs	r2, #10
 8005d42:	2100      	movs	r1, #0
 8005d44:	f000 b8e4 	b.w	8005f10 <strtol>

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	; (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000040 	.word	0x20000040

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	; (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	; (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	; (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	; (8005d98 <__libc_init_array+0x44>)
 8005d68:	f000 fd2a 	bl	80067c0 <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	080069f8 	.word	0x080069f8
 8005d90:	080069f8 	.word	0x080069f8
 8005d94:	080069f8 	.word	0x080069f8
 8005d98:	080069fc 	.word	0x080069fc

08005d9c <memcmp>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	3901      	subs	r1, #1
 8005da0:	4402      	add	r2, r0
 8005da2:	4290      	cmp	r0, r2
 8005da4:	d101      	bne.n	8005daa <memcmp+0xe>
 8005da6:	2000      	movs	r0, #0
 8005da8:	e005      	b.n	8005db6 <memcmp+0x1a>
 8005daa:	7803      	ldrb	r3, [r0, #0]
 8005dac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d001      	beq.n	8005db8 <memcmp+0x1c>
 8005db4:	1b18      	subs	r0, r3, r4
 8005db6:	bd10      	pop	{r4, pc}
 8005db8:	3001      	adds	r0, #1
 8005dba:	e7f2      	b.n	8005da2 <memcmp+0x6>

08005dbc <memset>:
 8005dbc:	4402      	add	r2, r0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d100      	bne.n	8005dc6 <memset+0xa>
 8005dc4:	4770      	bx	lr
 8005dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dca:	e7f9      	b.n	8005dc0 <memset+0x4>

08005dcc <siprintf>:
 8005dcc:	b40e      	push	{r1, r2, r3}
 8005dce:	b500      	push	{lr}
 8005dd0:	b09c      	sub	sp, #112	; 0x70
 8005dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8005dd4:	9002      	str	r0, [sp, #8]
 8005dd6:	9006      	str	r0, [sp, #24]
 8005dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ddc:	4809      	ldr	r0, [pc, #36]	; (8005e04 <siprintf+0x38>)
 8005dde:	9107      	str	r1, [sp, #28]
 8005de0:	9104      	str	r1, [sp, #16]
 8005de2:	4909      	ldr	r1, [pc, #36]	; (8005e08 <siprintf+0x3c>)
 8005de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de8:	9105      	str	r1, [sp, #20]
 8005dea:	6800      	ldr	r0, [r0, #0]
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	a902      	add	r1, sp, #8
 8005df0:	f000 f8f4 	bl	8005fdc <_svfiprintf_r>
 8005df4:	9b02      	ldr	r3, [sp, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	b01c      	add	sp, #112	; 0x70
 8005dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e00:	b003      	add	sp, #12
 8005e02:	4770      	bx	lr
 8005e04:	20000040 	.word	0x20000040
 8005e08:	ffff0208 	.word	0xffff0208

08005e0c <_strtol_l.constprop.0>:
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e12:	d001      	beq.n	8005e18 <_strtol_l.constprop.0+0xc>
 8005e14:	2b24      	cmp	r3, #36	; 0x24
 8005e16:	d906      	bls.n	8005e26 <_strtol_l.constprop.0+0x1a>
 8005e18:	f7ff ff96 	bl	8005d48 <__errno>
 8005e1c:	2316      	movs	r3, #22
 8005e1e:	6003      	str	r3, [r0, #0]
 8005e20:	2000      	movs	r0, #0
 8005e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f0c <_strtol_l.constprop.0+0x100>
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	462e      	mov	r6, r5
 8005e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e32:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005e36:	f017 0708 	ands.w	r7, r7, #8
 8005e3a:	d1f7      	bne.n	8005e2c <_strtol_l.constprop.0+0x20>
 8005e3c:	2c2d      	cmp	r4, #45	; 0x2d
 8005e3e:	d132      	bne.n	8005ea6 <_strtol_l.constprop.0+0x9a>
 8005e40:	782c      	ldrb	r4, [r5, #0]
 8005e42:	2701      	movs	r7, #1
 8005e44:	1cb5      	adds	r5, r6, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d05b      	beq.n	8005f02 <_strtol_l.constprop.0+0xf6>
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d109      	bne.n	8005e62 <_strtol_l.constprop.0+0x56>
 8005e4e:	2c30      	cmp	r4, #48	; 0x30
 8005e50:	d107      	bne.n	8005e62 <_strtol_l.constprop.0+0x56>
 8005e52:	782c      	ldrb	r4, [r5, #0]
 8005e54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005e58:	2c58      	cmp	r4, #88	; 0x58
 8005e5a:	d14d      	bne.n	8005ef8 <_strtol_l.constprop.0+0xec>
 8005e5c:	786c      	ldrb	r4, [r5, #1]
 8005e5e:	2310      	movs	r3, #16
 8005e60:	3502      	adds	r5, #2
 8005e62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005e66:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e6a:	f04f 0c00 	mov.w	ip, #0
 8005e6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005e72:	4666      	mov	r6, ip
 8005e74:	fb03 8a19 	mls	sl, r3, r9, r8
 8005e78:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005e7c:	f1be 0f09 	cmp.w	lr, #9
 8005e80:	d816      	bhi.n	8005eb0 <_strtol_l.constprop.0+0xa4>
 8005e82:	4674      	mov	r4, lr
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	dd24      	ble.n	8005ed2 <_strtol_l.constprop.0+0xc6>
 8005e88:	f1bc 0f00 	cmp.w	ip, #0
 8005e8c:	db1e      	blt.n	8005ecc <_strtol_l.constprop.0+0xc0>
 8005e8e:	45b1      	cmp	r9, r6
 8005e90:	d31c      	bcc.n	8005ecc <_strtol_l.constprop.0+0xc0>
 8005e92:	d101      	bne.n	8005e98 <_strtol_l.constprop.0+0x8c>
 8005e94:	45a2      	cmp	sl, r4
 8005e96:	db19      	blt.n	8005ecc <_strtol_l.constprop.0+0xc0>
 8005e98:	fb06 4603 	mla	r6, r6, r3, r4
 8005e9c:	f04f 0c01 	mov.w	ip, #1
 8005ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ea4:	e7e8      	b.n	8005e78 <_strtol_l.constprop.0+0x6c>
 8005ea6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ea8:	bf04      	itt	eq
 8005eaa:	782c      	ldrbeq	r4, [r5, #0]
 8005eac:	1cb5      	addeq	r5, r6, #2
 8005eae:	e7ca      	b.n	8005e46 <_strtol_l.constprop.0+0x3a>
 8005eb0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005eb4:	f1be 0f19 	cmp.w	lr, #25
 8005eb8:	d801      	bhi.n	8005ebe <_strtol_l.constprop.0+0xb2>
 8005eba:	3c37      	subs	r4, #55	; 0x37
 8005ebc:	e7e2      	b.n	8005e84 <_strtol_l.constprop.0+0x78>
 8005ebe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005ec2:	f1be 0f19 	cmp.w	lr, #25
 8005ec6:	d804      	bhi.n	8005ed2 <_strtol_l.constprop.0+0xc6>
 8005ec8:	3c57      	subs	r4, #87	; 0x57
 8005eca:	e7db      	b.n	8005e84 <_strtol_l.constprop.0+0x78>
 8005ecc:	f04f 3cff 	mov.w	ip, #4294967295
 8005ed0:	e7e6      	b.n	8005ea0 <_strtol_l.constprop.0+0x94>
 8005ed2:	f1bc 0f00 	cmp.w	ip, #0
 8005ed6:	da05      	bge.n	8005ee4 <_strtol_l.constprop.0+0xd8>
 8005ed8:	2322      	movs	r3, #34	; 0x22
 8005eda:	6003      	str	r3, [r0, #0]
 8005edc:	4646      	mov	r6, r8
 8005ede:	b942      	cbnz	r2, 8005ef2 <_strtol_l.constprop.0+0xe6>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	e79e      	b.n	8005e22 <_strtol_l.constprop.0+0x16>
 8005ee4:	b107      	cbz	r7, 8005ee8 <_strtol_l.constprop.0+0xdc>
 8005ee6:	4276      	negs	r6, r6
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d0f9      	beq.n	8005ee0 <_strtol_l.constprop.0+0xd4>
 8005eec:	f1bc 0f00 	cmp.w	ip, #0
 8005ef0:	d000      	beq.n	8005ef4 <_strtol_l.constprop.0+0xe8>
 8005ef2:	1e69      	subs	r1, r5, #1
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	e7f3      	b.n	8005ee0 <_strtol_l.constprop.0+0xd4>
 8005ef8:	2430      	movs	r4, #48	; 0x30
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1b1      	bne.n	8005e62 <_strtol_l.constprop.0+0x56>
 8005efe:	2308      	movs	r3, #8
 8005f00:	e7af      	b.n	8005e62 <_strtol_l.constprop.0+0x56>
 8005f02:	2c30      	cmp	r4, #48	; 0x30
 8005f04:	d0a5      	beq.n	8005e52 <_strtol_l.constprop.0+0x46>
 8005f06:	230a      	movs	r3, #10
 8005f08:	e7ab      	b.n	8005e62 <_strtol_l.constprop.0+0x56>
 8005f0a:	bf00      	nop
 8005f0c:	080068bd 	.word	0x080068bd

08005f10 <strtol>:
 8005f10:	4613      	mov	r3, r2
 8005f12:	460a      	mov	r2, r1
 8005f14:	4601      	mov	r1, r0
 8005f16:	4802      	ldr	r0, [pc, #8]	; (8005f20 <strtol+0x10>)
 8005f18:	6800      	ldr	r0, [r0, #0]
 8005f1a:	f7ff bf77 	b.w	8005e0c <_strtol_l.constprop.0>
 8005f1e:	bf00      	nop
 8005f20:	20000040 	.word	0x20000040

08005f24 <__ssputs_r>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	688e      	ldr	r6, [r1, #8]
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4690      	mov	r8, r2
 8005f32:	461f      	mov	r7, r3
 8005f34:	d838      	bhi.n	8005fa8 <__ssputs_r+0x84>
 8005f36:	898a      	ldrh	r2, [r1, #12]
 8005f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f3c:	d032      	beq.n	8005fa4 <__ssputs_r+0x80>
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	6909      	ldr	r1, [r1, #16]
 8005f42:	eba5 0901 	sub.w	r9, r5, r1
 8005f46:	6965      	ldr	r5, [r4, #20]
 8005f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f50:	3301      	adds	r3, #1
 8005f52:	444b      	add	r3, r9
 8005f54:	106d      	asrs	r5, r5, #1
 8005f56:	429d      	cmp	r5, r3
 8005f58:	bf38      	it	cc
 8005f5a:	461d      	movcc	r5, r3
 8005f5c:	0553      	lsls	r3, r2, #21
 8005f5e:	d531      	bpl.n	8005fc4 <__ssputs_r+0xa0>
 8005f60:	4629      	mov	r1, r5
 8005f62:	f000 fb63 	bl	800662c <_malloc_r>
 8005f66:	4606      	mov	r6, r0
 8005f68:	b950      	cbnz	r0, 8005f80 <__ssputs_r+0x5c>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	f8ca 3000 	str.w	r3, [sl]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f76:	81a3      	strh	r3, [r4, #12]
 8005f78:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f80:	6921      	ldr	r1, [r4, #16]
 8005f82:	464a      	mov	r2, r9
 8005f84:	f000 fabe 	bl	8006504 <memcpy>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	6126      	str	r6, [r4, #16]
 8005f96:	6165      	str	r5, [r4, #20]
 8005f98:	444e      	add	r6, r9
 8005f9a:	eba5 0509 	sub.w	r5, r5, r9
 8005f9e:	6026      	str	r6, [r4, #0]
 8005fa0:	60a5      	str	r5, [r4, #8]
 8005fa2:	463e      	mov	r6, r7
 8005fa4:	42be      	cmp	r6, r7
 8005fa6:	d900      	bls.n	8005faa <__ssputs_r+0x86>
 8005fa8:	463e      	mov	r6, r7
 8005faa:	6820      	ldr	r0, [r4, #0]
 8005fac:	4632      	mov	r2, r6
 8005fae:	4641      	mov	r1, r8
 8005fb0:	f000 fab6 	bl	8006520 <memmove>
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	1b9b      	subs	r3, r3, r6
 8005fb8:	60a3      	str	r3, [r4, #8]
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	4433      	add	r3, r6
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	e7db      	b.n	8005f7c <__ssputs_r+0x58>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	f000 fba5 	bl	8006714 <_realloc_r>
 8005fca:	4606      	mov	r6, r0
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d1e1      	bne.n	8005f94 <__ssputs_r+0x70>
 8005fd0:	6921      	ldr	r1, [r4, #16]
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f000 fabe 	bl	8006554 <_free_r>
 8005fd8:	e7c7      	b.n	8005f6a <__ssputs_r+0x46>
	...

08005fdc <_svfiprintf_r>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	898b      	ldrh	r3, [r1, #12]
 8005fe4:	061b      	lsls	r3, r3, #24
 8005fe6:	b09d      	sub	sp, #116	; 0x74
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460d      	mov	r5, r1
 8005fec:	4614      	mov	r4, r2
 8005fee:	d50e      	bpl.n	800600e <_svfiprintf_r+0x32>
 8005ff0:	690b      	ldr	r3, [r1, #16]
 8005ff2:	b963      	cbnz	r3, 800600e <_svfiprintf_r+0x32>
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	f000 fb19 	bl	800662c <_malloc_r>
 8005ffa:	6028      	str	r0, [r5, #0]
 8005ffc:	6128      	str	r0, [r5, #16]
 8005ffe:	b920      	cbnz	r0, 800600a <_svfiprintf_r+0x2e>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	e0d1      	b.n	80061ae <_svfiprintf_r+0x1d2>
 800600a:	2340      	movs	r3, #64	; 0x40
 800600c:	616b      	str	r3, [r5, #20]
 800600e:	2300      	movs	r3, #0
 8006010:	9309      	str	r3, [sp, #36]	; 0x24
 8006012:	2320      	movs	r3, #32
 8006014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006018:	f8cd 800c 	str.w	r8, [sp, #12]
 800601c:	2330      	movs	r3, #48	; 0x30
 800601e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061c8 <_svfiprintf_r+0x1ec>
 8006022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006026:	f04f 0901 	mov.w	r9, #1
 800602a:	4623      	mov	r3, r4
 800602c:	469a      	mov	sl, r3
 800602e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006032:	b10a      	cbz	r2, 8006038 <_svfiprintf_r+0x5c>
 8006034:	2a25      	cmp	r2, #37	; 0x25
 8006036:	d1f9      	bne.n	800602c <_svfiprintf_r+0x50>
 8006038:	ebba 0b04 	subs.w	fp, sl, r4
 800603c:	d00b      	beq.n	8006056 <_svfiprintf_r+0x7a>
 800603e:	465b      	mov	r3, fp
 8006040:	4622      	mov	r2, r4
 8006042:	4629      	mov	r1, r5
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff6d 	bl	8005f24 <__ssputs_r>
 800604a:	3001      	adds	r0, #1
 800604c:	f000 80aa 	beq.w	80061a4 <_svfiprintf_r+0x1c8>
 8006050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006052:	445a      	add	r2, fp
 8006054:	9209      	str	r2, [sp, #36]	; 0x24
 8006056:	f89a 3000 	ldrb.w	r3, [sl]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 80a2 	beq.w	80061a4 <_svfiprintf_r+0x1c8>
 8006060:	2300      	movs	r3, #0
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800606a:	f10a 0a01 	add.w	sl, sl, #1
 800606e:	9304      	str	r3, [sp, #16]
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006076:	931a      	str	r3, [sp, #104]	; 0x68
 8006078:	4654      	mov	r4, sl
 800607a:	2205      	movs	r2, #5
 800607c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006080:	4851      	ldr	r0, [pc, #324]	; (80061c8 <_svfiprintf_r+0x1ec>)
 8006082:	f7fa f8ad 	bl	80001e0 <memchr>
 8006086:	9a04      	ldr	r2, [sp, #16]
 8006088:	b9d8      	cbnz	r0, 80060c2 <_svfiprintf_r+0xe6>
 800608a:	06d0      	lsls	r0, r2, #27
 800608c:	bf44      	itt	mi
 800608e:	2320      	movmi	r3, #32
 8006090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006094:	0711      	lsls	r1, r2, #28
 8006096:	bf44      	itt	mi
 8006098:	232b      	movmi	r3, #43	; 0x2b
 800609a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800609e:	f89a 3000 	ldrb.w	r3, [sl]
 80060a2:	2b2a      	cmp	r3, #42	; 0x2a
 80060a4:	d015      	beq.n	80060d2 <_svfiprintf_r+0xf6>
 80060a6:	9a07      	ldr	r2, [sp, #28]
 80060a8:	4654      	mov	r4, sl
 80060aa:	2000      	movs	r0, #0
 80060ac:	f04f 0c0a 	mov.w	ip, #10
 80060b0:	4621      	mov	r1, r4
 80060b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b6:	3b30      	subs	r3, #48	; 0x30
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d94e      	bls.n	800615a <_svfiprintf_r+0x17e>
 80060bc:	b1b0      	cbz	r0, 80060ec <_svfiprintf_r+0x110>
 80060be:	9207      	str	r2, [sp, #28]
 80060c0:	e014      	b.n	80060ec <_svfiprintf_r+0x110>
 80060c2:	eba0 0308 	sub.w	r3, r0, r8
 80060c6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ca:	4313      	orrs	r3, r2
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	46a2      	mov	sl, r4
 80060d0:	e7d2      	b.n	8006078 <_svfiprintf_r+0x9c>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	1d19      	adds	r1, r3, #4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	9103      	str	r1, [sp, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	bfbb      	ittet	lt
 80060de:	425b      	neglt	r3, r3
 80060e0:	f042 0202 	orrlt.w	r2, r2, #2
 80060e4:	9307      	strge	r3, [sp, #28]
 80060e6:	9307      	strlt	r3, [sp, #28]
 80060e8:	bfb8      	it	lt
 80060ea:	9204      	strlt	r2, [sp, #16]
 80060ec:	7823      	ldrb	r3, [r4, #0]
 80060ee:	2b2e      	cmp	r3, #46	; 0x2e
 80060f0:	d10c      	bne.n	800610c <_svfiprintf_r+0x130>
 80060f2:	7863      	ldrb	r3, [r4, #1]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d135      	bne.n	8006164 <_svfiprintf_r+0x188>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	9203      	str	r2, [sp, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	bfb8      	it	lt
 8006104:	f04f 33ff 	movlt.w	r3, #4294967295
 8006108:	3402      	adds	r4, #2
 800610a:	9305      	str	r3, [sp, #20]
 800610c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061d8 <_svfiprintf_r+0x1fc>
 8006110:	7821      	ldrb	r1, [r4, #0]
 8006112:	2203      	movs	r2, #3
 8006114:	4650      	mov	r0, sl
 8006116:	f7fa f863 	bl	80001e0 <memchr>
 800611a:	b140      	cbz	r0, 800612e <_svfiprintf_r+0x152>
 800611c:	2340      	movs	r3, #64	; 0x40
 800611e:	eba0 000a 	sub.w	r0, r0, sl
 8006122:	fa03 f000 	lsl.w	r0, r3, r0
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	4303      	orrs	r3, r0
 800612a:	3401      	adds	r4, #1
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006132:	4826      	ldr	r0, [pc, #152]	; (80061cc <_svfiprintf_r+0x1f0>)
 8006134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006138:	2206      	movs	r2, #6
 800613a:	f7fa f851 	bl	80001e0 <memchr>
 800613e:	2800      	cmp	r0, #0
 8006140:	d038      	beq.n	80061b4 <_svfiprintf_r+0x1d8>
 8006142:	4b23      	ldr	r3, [pc, #140]	; (80061d0 <_svfiprintf_r+0x1f4>)
 8006144:	bb1b      	cbnz	r3, 800618e <_svfiprintf_r+0x1b2>
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	3307      	adds	r3, #7
 800614a:	f023 0307 	bic.w	r3, r3, #7
 800614e:	3308      	adds	r3, #8
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006154:	4433      	add	r3, r6
 8006156:	9309      	str	r3, [sp, #36]	; 0x24
 8006158:	e767      	b.n	800602a <_svfiprintf_r+0x4e>
 800615a:	fb0c 3202 	mla	r2, ip, r2, r3
 800615e:	460c      	mov	r4, r1
 8006160:	2001      	movs	r0, #1
 8006162:	e7a5      	b.n	80060b0 <_svfiprintf_r+0xd4>
 8006164:	2300      	movs	r3, #0
 8006166:	3401      	adds	r4, #1
 8006168:	9305      	str	r3, [sp, #20]
 800616a:	4619      	mov	r1, r3
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4620      	mov	r0, r4
 8006172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006176:	3a30      	subs	r2, #48	; 0x30
 8006178:	2a09      	cmp	r2, #9
 800617a:	d903      	bls.n	8006184 <_svfiprintf_r+0x1a8>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0c5      	beq.n	800610c <_svfiprintf_r+0x130>
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	e7c3      	b.n	800610c <_svfiprintf_r+0x130>
 8006184:	fb0c 2101 	mla	r1, ip, r1, r2
 8006188:	4604      	mov	r4, r0
 800618a:	2301      	movs	r3, #1
 800618c:	e7f0      	b.n	8006170 <_svfiprintf_r+0x194>
 800618e:	ab03      	add	r3, sp, #12
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	462a      	mov	r2, r5
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <_svfiprintf_r+0x1f8>)
 8006196:	a904      	add	r1, sp, #16
 8006198:	4638      	mov	r0, r7
 800619a:	f3af 8000 	nop.w
 800619e:	1c42      	adds	r2, r0, #1
 80061a0:	4606      	mov	r6, r0
 80061a2:	d1d6      	bne.n	8006152 <_svfiprintf_r+0x176>
 80061a4:	89ab      	ldrh	r3, [r5, #12]
 80061a6:	065b      	lsls	r3, r3, #25
 80061a8:	f53f af2c 	bmi.w	8006004 <_svfiprintf_r+0x28>
 80061ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ae:	b01d      	add	sp, #116	; 0x74
 80061b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b4:	ab03      	add	r3, sp, #12
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	462a      	mov	r2, r5
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <_svfiprintf_r+0x1f8>)
 80061bc:	a904      	add	r1, sp, #16
 80061be:	4638      	mov	r0, r7
 80061c0:	f000 f87a 	bl	80062b8 <_printf_i>
 80061c4:	e7eb      	b.n	800619e <_svfiprintf_r+0x1c2>
 80061c6:	bf00      	nop
 80061c8:	080069bd 	.word	0x080069bd
 80061cc:	080069c7 	.word	0x080069c7
 80061d0:	00000000 	.word	0x00000000
 80061d4:	08005f25 	.word	0x08005f25
 80061d8:	080069c3 	.word	0x080069c3

080061dc <_printf_common>:
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	4616      	mov	r6, r2
 80061e2:	4699      	mov	r9, r3
 80061e4:	688a      	ldr	r2, [r1, #8]
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bfb8      	it	lt
 80061f0:	4613      	movlt	r3, r2
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061f8:	4607      	mov	r7, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	b10a      	cbz	r2, 8006202 <_printf_common+0x26>
 80061fe:	3301      	adds	r3, #1
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	0699      	lsls	r1, r3, #26
 8006206:	bf42      	ittt	mi
 8006208:	6833      	ldrmi	r3, [r6, #0]
 800620a:	3302      	addmi	r3, #2
 800620c:	6033      	strmi	r3, [r6, #0]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	f015 0506 	ands.w	r5, r5, #6
 8006214:	d106      	bne.n	8006224 <_printf_common+0x48>
 8006216:	f104 0a19 	add.w	sl, r4, #25
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	6832      	ldr	r2, [r6, #0]
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	42ab      	cmp	r3, r5
 8006222:	dc26      	bgt.n	8006272 <_printf_common+0x96>
 8006224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006228:	1e13      	subs	r3, r2, #0
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	bf18      	it	ne
 800622e:	2301      	movne	r3, #1
 8006230:	0692      	lsls	r2, r2, #26
 8006232:	d42b      	bmi.n	800628c <_printf_common+0xb0>
 8006234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006238:	4649      	mov	r1, r9
 800623a:	4638      	mov	r0, r7
 800623c:	47c0      	blx	r8
 800623e:	3001      	adds	r0, #1
 8006240:	d01e      	beq.n	8006280 <_printf_common+0xa4>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	68e5      	ldr	r5, [r4, #12]
 8006246:	6832      	ldr	r2, [r6, #0]
 8006248:	f003 0306 	and.w	r3, r3, #6
 800624c:	2b04      	cmp	r3, #4
 800624e:	bf08      	it	eq
 8006250:	1aad      	subeq	r5, r5, r2
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	bf0c      	ite	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	2500      	movne	r5, #0
 800625e:	4293      	cmp	r3, r2
 8006260:	bfc4      	itt	gt
 8006262:	1a9b      	subgt	r3, r3, r2
 8006264:	18ed      	addgt	r5, r5, r3
 8006266:	2600      	movs	r6, #0
 8006268:	341a      	adds	r4, #26
 800626a:	42b5      	cmp	r5, r6
 800626c:	d11a      	bne.n	80062a4 <_printf_common+0xc8>
 800626e:	2000      	movs	r0, #0
 8006270:	e008      	b.n	8006284 <_printf_common+0xa8>
 8006272:	2301      	movs	r3, #1
 8006274:	4652      	mov	r2, sl
 8006276:	4649      	mov	r1, r9
 8006278:	4638      	mov	r0, r7
 800627a:	47c0      	blx	r8
 800627c:	3001      	adds	r0, #1
 800627e:	d103      	bne.n	8006288 <_printf_common+0xac>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006288:	3501      	adds	r5, #1
 800628a:	e7c6      	b.n	800621a <_printf_common+0x3e>
 800628c:	18e1      	adds	r1, r4, r3
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	2030      	movs	r0, #48	; 0x30
 8006292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006296:	4422      	add	r2, r4
 8006298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800629c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062a0:	3302      	adds	r3, #2
 80062a2:	e7c7      	b.n	8006234 <_printf_common+0x58>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4622      	mov	r2, r4
 80062a8:	4649      	mov	r1, r9
 80062aa:	4638      	mov	r0, r7
 80062ac:	47c0      	blx	r8
 80062ae:	3001      	adds	r0, #1
 80062b0:	d0e6      	beq.n	8006280 <_printf_common+0xa4>
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7d9      	b.n	800626a <_printf_common+0x8e>
	...

080062b8 <_printf_i>:
 80062b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	7e0f      	ldrb	r7, [r1, #24]
 80062be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062c0:	2f78      	cmp	r7, #120	; 0x78
 80062c2:	4691      	mov	r9, r2
 80062c4:	4680      	mov	r8, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	469a      	mov	sl, r3
 80062ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ce:	d807      	bhi.n	80062e0 <_printf_i+0x28>
 80062d0:	2f62      	cmp	r7, #98	; 0x62
 80062d2:	d80a      	bhi.n	80062ea <_printf_i+0x32>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f000 80d8 	beq.w	800648a <_printf_i+0x1d2>
 80062da:	2f58      	cmp	r7, #88	; 0x58
 80062dc:	f000 80a3 	beq.w	8006426 <_printf_i+0x16e>
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062e8:	e03a      	b.n	8006360 <_printf_i+0xa8>
 80062ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062ee:	2b15      	cmp	r3, #21
 80062f0:	d8f6      	bhi.n	80062e0 <_printf_i+0x28>
 80062f2:	a101      	add	r1, pc, #4	; (adr r1, 80062f8 <_printf_i+0x40>)
 80062f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f8:	08006351 	.word	0x08006351
 80062fc:	08006365 	.word	0x08006365
 8006300:	080062e1 	.word	0x080062e1
 8006304:	080062e1 	.word	0x080062e1
 8006308:	080062e1 	.word	0x080062e1
 800630c:	080062e1 	.word	0x080062e1
 8006310:	08006365 	.word	0x08006365
 8006314:	080062e1 	.word	0x080062e1
 8006318:	080062e1 	.word	0x080062e1
 800631c:	080062e1 	.word	0x080062e1
 8006320:	080062e1 	.word	0x080062e1
 8006324:	08006471 	.word	0x08006471
 8006328:	08006395 	.word	0x08006395
 800632c:	08006453 	.word	0x08006453
 8006330:	080062e1 	.word	0x080062e1
 8006334:	080062e1 	.word	0x080062e1
 8006338:	08006493 	.word	0x08006493
 800633c:	080062e1 	.word	0x080062e1
 8006340:	08006395 	.word	0x08006395
 8006344:	080062e1 	.word	0x080062e1
 8006348:	080062e1 	.word	0x080062e1
 800634c:	0800645b 	.word	0x0800645b
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	602a      	str	r2, [r5, #0]
 8006358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800635c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006360:	2301      	movs	r3, #1
 8006362:	e0a3      	b.n	80064ac <_printf_i+0x1f4>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	6829      	ldr	r1, [r5, #0]
 8006368:	0606      	lsls	r6, r0, #24
 800636a:	f101 0304 	add.w	r3, r1, #4
 800636e:	d50a      	bpl.n	8006386 <_printf_i+0xce>
 8006370:	680e      	ldr	r6, [r1, #0]
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	2e00      	cmp	r6, #0
 8006376:	da03      	bge.n	8006380 <_printf_i+0xc8>
 8006378:	232d      	movs	r3, #45	; 0x2d
 800637a:	4276      	negs	r6, r6
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	485e      	ldr	r0, [pc, #376]	; (80064fc <_printf_i+0x244>)
 8006382:	230a      	movs	r3, #10
 8006384:	e019      	b.n	80063ba <_printf_i+0x102>
 8006386:	680e      	ldr	r6, [r1, #0]
 8006388:	602b      	str	r3, [r5, #0]
 800638a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800638e:	bf18      	it	ne
 8006390:	b236      	sxthne	r6, r6
 8006392:	e7ef      	b.n	8006374 <_printf_i+0xbc>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	1d19      	adds	r1, r3, #4
 800639a:	6029      	str	r1, [r5, #0]
 800639c:	0601      	lsls	r1, r0, #24
 800639e:	d501      	bpl.n	80063a4 <_printf_i+0xec>
 80063a0:	681e      	ldr	r6, [r3, #0]
 80063a2:	e002      	b.n	80063aa <_printf_i+0xf2>
 80063a4:	0646      	lsls	r6, r0, #25
 80063a6:	d5fb      	bpl.n	80063a0 <_printf_i+0xe8>
 80063a8:	881e      	ldrh	r6, [r3, #0]
 80063aa:	4854      	ldr	r0, [pc, #336]	; (80064fc <_printf_i+0x244>)
 80063ac:	2f6f      	cmp	r7, #111	; 0x6f
 80063ae:	bf0c      	ite	eq
 80063b0:	2308      	moveq	r3, #8
 80063b2:	230a      	movne	r3, #10
 80063b4:	2100      	movs	r1, #0
 80063b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063ba:	6865      	ldr	r5, [r4, #4]
 80063bc:	60a5      	str	r5, [r4, #8]
 80063be:	2d00      	cmp	r5, #0
 80063c0:	bfa2      	ittt	ge
 80063c2:	6821      	ldrge	r1, [r4, #0]
 80063c4:	f021 0104 	bicge.w	r1, r1, #4
 80063c8:	6021      	strge	r1, [r4, #0]
 80063ca:	b90e      	cbnz	r6, 80063d0 <_printf_i+0x118>
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	d04d      	beq.n	800646c <_printf_i+0x1b4>
 80063d0:	4615      	mov	r5, r2
 80063d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063d6:	fb03 6711 	mls	r7, r3, r1, r6
 80063da:	5dc7      	ldrb	r7, [r0, r7]
 80063dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063e0:	4637      	mov	r7, r6
 80063e2:	42bb      	cmp	r3, r7
 80063e4:	460e      	mov	r6, r1
 80063e6:	d9f4      	bls.n	80063d2 <_printf_i+0x11a>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d10b      	bne.n	8006404 <_printf_i+0x14c>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	07de      	lsls	r6, r3, #31
 80063f0:	d508      	bpl.n	8006404 <_printf_i+0x14c>
 80063f2:	6923      	ldr	r3, [r4, #16]
 80063f4:	6861      	ldr	r1, [r4, #4]
 80063f6:	4299      	cmp	r1, r3
 80063f8:	bfde      	ittt	le
 80063fa:	2330      	movle	r3, #48	; 0x30
 80063fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006404:	1b52      	subs	r2, r2, r5
 8006406:	6122      	str	r2, [r4, #16]
 8006408:	f8cd a000 	str.w	sl, [sp]
 800640c:	464b      	mov	r3, r9
 800640e:	aa03      	add	r2, sp, #12
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fee2 	bl	80061dc <_printf_common>
 8006418:	3001      	adds	r0, #1
 800641a:	d14c      	bne.n	80064b6 <_printf_i+0x1fe>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295
 8006420:	b004      	add	sp, #16
 8006422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006426:	4835      	ldr	r0, [pc, #212]	; (80064fc <_printf_i+0x244>)
 8006428:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800642c:	6829      	ldr	r1, [r5, #0]
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	f851 6b04 	ldr.w	r6, [r1], #4
 8006434:	6029      	str	r1, [r5, #0]
 8006436:	061d      	lsls	r5, r3, #24
 8006438:	d514      	bpl.n	8006464 <_printf_i+0x1ac>
 800643a:	07df      	lsls	r7, r3, #31
 800643c:	bf44      	itt	mi
 800643e:	f043 0320 	orrmi.w	r3, r3, #32
 8006442:	6023      	strmi	r3, [r4, #0]
 8006444:	b91e      	cbnz	r6, 800644e <_printf_i+0x196>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	f023 0320 	bic.w	r3, r3, #32
 800644c:	6023      	str	r3, [r4, #0]
 800644e:	2310      	movs	r3, #16
 8006450:	e7b0      	b.n	80063b4 <_printf_i+0xfc>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f043 0320 	orr.w	r3, r3, #32
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2378      	movs	r3, #120	; 0x78
 800645c:	4828      	ldr	r0, [pc, #160]	; (8006500 <_printf_i+0x248>)
 800645e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006462:	e7e3      	b.n	800642c <_printf_i+0x174>
 8006464:	0659      	lsls	r1, r3, #25
 8006466:	bf48      	it	mi
 8006468:	b2b6      	uxthmi	r6, r6
 800646a:	e7e6      	b.n	800643a <_printf_i+0x182>
 800646c:	4615      	mov	r5, r2
 800646e:	e7bb      	b.n	80063e8 <_printf_i+0x130>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	6826      	ldr	r6, [r4, #0]
 8006474:	6961      	ldr	r1, [r4, #20]
 8006476:	1d18      	adds	r0, r3, #4
 8006478:	6028      	str	r0, [r5, #0]
 800647a:	0635      	lsls	r5, r6, #24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	d501      	bpl.n	8006484 <_printf_i+0x1cc>
 8006480:	6019      	str	r1, [r3, #0]
 8006482:	e002      	b.n	800648a <_printf_i+0x1d2>
 8006484:	0670      	lsls	r0, r6, #25
 8006486:	d5fb      	bpl.n	8006480 <_printf_i+0x1c8>
 8006488:	8019      	strh	r1, [r3, #0]
 800648a:	2300      	movs	r3, #0
 800648c:	6123      	str	r3, [r4, #16]
 800648e:	4615      	mov	r5, r2
 8006490:	e7ba      	b.n	8006408 <_printf_i+0x150>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	6862      	ldr	r2, [r4, #4]
 800649c:	2100      	movs	r1, #0
 800649e:	4628      	mov	r0, r5
 80064a0:	f7f9 fe9e 	bl	80001e0 <memchr>
 80064a4:	b108      	cbz	r0, 80064aa <_printf_i+0x1f2>
 80064a6:	1b40      	subs	r0, r0, r5
 80064a8:	6060      	str	r0, [r4, #4]
 80064aa:	6863      	ldr	r3, [r4, #4]
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	2300      	movs	r3, #0
 80064b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b4:	e7a8      	b.n	8006408 <_printf_i+0x150>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	462a      	mov	r2, r5
 80064ba:	4649      	mov	r1, r9
 80064bc:	4640      	mov	r0, r8
 80064be:	47d0      	blx	sl
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0ab      	beq.n	800641c <_printf_i+0x164>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	d413      	bmi.n	80064f2 <_printf_i+0x23a>
 80064ca:	68e0      	ldr	r0, [r4, #12]
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	4298      	cmp	r0, r3
 80064d0:	bfb8      	it	lt
 80064d2:	4618      	movlt	r0, r3
 80064d4:	e7a4      	b.n	8006420 <_printf_i+0x168>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4632      	mov	r2, r6
 80064da:	4649      	mov	r1, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	47d0      	blx	sl
 80064e0:	3001      	adds	r0, #1
 80064e2:	d09b      	beq.n	800641c <_printf_i+0x164>
 80064e4:	3501      	adds	r5, #1
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	9903      	ldr	r1, [sp, #12]
 80064ea:	1a5b      	subs	r3, r3, r1
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dcf2      	bgt.n	80064d6 <_printf_i+0x21e>
 80064f0:	e7eb      	b.n	80064ca <_printf_i+0x212>
 80064f2:	2500      	movs	r5, #0
 80064f4:	f104 0619 	add.w	r6, r4, #25
 80064f8:	e7f5      	b.n	80064e6 <_printf_i+0x22e>
 80064fa:	bf00      	nop
 80064fc:	080069ce 	.word	0x080069ce
 8006500:	080069df 	.word	0x080069df

08006504 <memcpy>:
 8006504:	440a      	add	r2, r1
 8006506:	4291      	cmp	r1, r2
 8006508:	f100 33ff 	add.w	r3, r0, #4294967295
 800650c:	d100      	bne.n	8006510 <memcpy+0xc>
 800650e:	4770      	bx	lr
 8006510:	b510      	push	{r4, lr}
 8006512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800651a:	4291      	cmp	r1, r2
 800651c:	d1f9      	bne.n	8006512 <memcpy+0xe>
 800651e:	bd10      	pop	{r4, pc}

08006520 <memmove>:
 8006520:	4288      	cmp	r0, r1
 8006522:	b510      	push	{r4, lr}
 8006524:	eb01 0402 	add.w	r4, r1, r2
 8006528:	d902      	bls.n	8006530 <memmove+0x10>
 800652a:	4284      	cmp	r4, r0
 800652c:	4623      	mov	r3, r4
 800652e:	d807      	bhi.n	8006540 <memmove+0x20>
 8006530:	1e43      	subs	r3, r0, #1
 8006532:	42a1      	cmp	r1, r4
 8006534:	d008      	beq.n	8006548 <memmove+0x28>
 8006536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800653a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800653e:	e7f8      	b.n	8006532 <memmove+0x12>
 8006540:	4402      	add	r2, r0
 8006542:	4601      	mov	r1, r0
 8006544:	428a      	cmp	r2, r1
 8006546:	d100      	bne.n	800654a <memmove+0x2a>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800654e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006552:	e7f7      	b.n	8006544 <memmove+0x24>

08006554 <_free_r>:
 8006554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006556:	2900      	cmp	r1, #0
 8006558:	d044      	beq.n	80065e4 <_free_r+0x90>
 800655a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800655e:	9001      	str	r0, [sp, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f1a1 0404 	sub.w	r4, r1, #4
 8006566:	bfb8      	it	lt
 8006568:	18e4      	addlt	r4, r4, r3
 800656a:	f000 f913 	bl	8006794 <__malloc_lock>
 800656e:	4a1e      	ldr	r2, [pc, #120]	; (80065e8 <_free_r+0x94>)
 8006570:	9801      	ldr	r0, [sp, #4]
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	b933      	cbnz	r3, 8006584 <_free_r+0x30>
 8006576:	6063      	str	r3, [r4, #4]
 8006578:	6014      	str	r4, [r2, #0]
 800657a:	b003      	add	sp, #12
 800657c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006580:	f000 b90e 	b.w	80067a0 <__malloc_unlock>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d908      	bls.n	800659a <_free_r+0x46>
 8006588:	6825      	ldr	r5, [r4, #0]
 800658a:	1961      	adds	r1, r4, r5
 800658c:	428b      	cmp	r3, r1
 800658e:	bf01      	itttt	eq
 8006590:	6819      	ldreq	r1, [r3, #0]
 8006592:	685b      	ldreq	r3, [r3, #4]
 8006594:	1949      	addeq	r1, r1, r5
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	e7ed      	b.n	8006576 <_free_r+0x22>
 800659a:	461a      	mov	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	b10b      	cbz	r3, 80065a4 <_free_r+0x50>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d9fa      	bls.n	800659a <_free_r+0x46>
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	1855      	adds	r5, r2, r1
 80065a8:	42a5      	cmp	r5, r4
 80065aa:	d10b      	bne.n	80065c4 <_free_r+0x70>
 80065ac:	6824      	ldr	r4, [r4, #0]
 80065ae:	4421      	add	r1, r4
 80065b0:	1854      	adds	r4, r2, r1
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	d1e0      	bne.n	800657a <_free_r+0x26>
 80065b8:	681c      	ldr	r4, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	6053      	str	r3, [r2, #4]
 80065be:	4421      	add	r1, r4
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	e7da      	b.n	800657a <_free_r+0x26>
 80065c4:	d902      	bls.n	80065cc <_free_r+0x78>
 80065c6:	230c      	movs	r3, #12
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	e7d6      	b.n	800657a <_free_r+0x26>
 80065cc:	6825      	ldr	r5, [r4, #0]
 80065ce:	1961      	adds	r1, r4, r5
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf04      	itt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	6063      	str	r3, [r4, #4]
 80065da:	bf04      	itt	eq
 80065dc:	1949      	addeq	r1, r1, r5
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	6054      	str	r4, [r2, #4]
 80065e2:	e7ca      	b.n	800657a <_free_r+0x26>
 80065e4:	b003      	add	sp, #12
 80065e6:	bd30      	pop	{r4, r5, pc}
 80065e8:	200002e0 	.word	0x200002e0

080065ec <sbrk_aligned>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4e0e      	ldr	r6, [pc, #56]	; (8006628 <sbrk_aligned+0x3c>)
 80065f0:	460c      	mov	r4, r1
 80065f2:	6831      	ldr	r1, [r6, #0]
 80065f4:	4605      	mov	r5, r0
 80065f6:	b911      	cbnz	r1, 80065fe <sbrk_aligned+0x12>
 80065f8:	f000 f8bc 	bl	8006774 <_sbrk_r>
 80065fc:	6030      	str	r0, [r6, #0]
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f8b7 	bl	8006774 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d00a      	beq.n	8006620 <sbrk_aligned+0x34>
 800660a:	1cc4      	adds	r4, r0, #3
 800660c:	f024 0403 	bic.w	r4, r4, #3
 8006610:	42a0      	cmp	r0, r4
 8006612:	d007      	beq.n	8006624 <sbrk_aligned+0x38>
 8006614:	1a21      	subs	r1, r4, r0
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f8ac 	bl	8006774 <_sbrk_r>
 800661c:	3001      	adds	r0, #1
 800661e:	d101      	bne.n	8006624 <sbrk_aligned+0x38>
 8006620:	f04f 34ff 	mov.w	r4, #4294967295
 8006624:	4620      	mov	r0, r4
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	200002e4 	.word	0x200002e4

0800662c <_malloc_r>:
 800662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006630:	1ccd      	adds	r5, r1, #3
 8006632:	f025 0503 	bic.w	r5, r5, #3
 8006636:	3508      	adds	r5, #8
 8006638:	2d0c      	cmp	r5, #12
 800663a:	bf38      	it	cc
 800663c:	250c      	movcc	r5, #12
 800663e:	2d00      	cmp	r5, #0
 8006640:	4607      	mov	r7, r0
 8006642:	db01      	blt.n	8006648 <_malloc_r+0x1c>
 8006644:	42a9      	cmp	r1, r5
 8006646:	d905      	bls.n	8006654 <_malloc_r+0x28>
 8006648:	230c      	movs	r3, #12
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	2600      	movs	r6, #0
 800664e:	4630      	mov	r0, r6
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	4e2e      	ldr	r6, [pc, #184]	; (8006710 <_malloc_r+0xe4>)
 8006656:	f000 f89d 	bl	8006794 <__malloc_lock>
 800665a:	6833      	ldr	r3, [r6, #0]
 800665c:	461c      	mov	r4, r3
 800665e:	bb34      	cbnz	r4, 80066ae <_malloc_r+0x82>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	f7ff ffc2 	bl	80065ec <sbrk_aligned>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	4604      	mov	r4, r0
 800666c:	d14d      	bne.n	800670a <_malloc_r+0xde>
 800666e:	6834      	ldr	r4, [r6, #0]
 8006670:	4626      	mov	r6, r4
 8006672:	2e00      	cmp	r6, #0
 8006674:	d140      	bne.n	80066f8 <_malloc_r+0xcc>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	4631      	mov	r1, r6
 800667a:	4638      	mov	r0, r7
 800667c:	eb04 0803 	add.w	r8, r4, r3
 8006680:	f000 f878 	bl	8006774 <_sbrk_r>
 8006684:	4580      	cmp	r8, r0
 8006686:	d13a      	bne.n	80066fe <_malloc_r+0xd2>
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	3503      	adds	r5, #3
 800668c:	1a6d      	subs	r5, r5, r1
 800668e:	f025 0503 	bic.w	r5, r5, #3
 8006692:	3508      	adds	r5, #8
 8006694:	2d0c      	cmp	r5, #12
 8006696:	bf38      	it	cc
 8006698:	250c      	movcc	r5, #12
 800669a:	4629      	mov	r1, r5
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ffa5 	bl	80065ec <sbrk_aligned>
 80066a2:	3001      	adds	r0, #1
 80066a4:	d02b      	beq.n	80066fe <_malloc_r+0xd2>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	442b      	add	r3, r5
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	e00e      	b.n	80066cc <_malloc_r+0xa0>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	1b52      	subs	r2, r2, r5
 80066b2:	d41e      	bmi.n	80066f2 <_malloc_r+0xc6>
 80066b4:	2a0b      	cmp	r2, #11
 80066b6:	d916      	bls.n	80066e6 <_malloc_r+0xba>
 80066b8:	1961      	adds	r1, r4, r5
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	bf18      	it	ne
 80066c0:	6059      	strne	r1, [r3, #4]
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	bf08      	it	eq
 80066c6:	6031      	streq	r1, [r6, #0]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 f865 	bl	80067a0 <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0b6      	beq.n	800664e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7b3      	b.n	800664e <_malloc_r+0x22>
 80066e6:	6862      	ldr	r2, [r4, #4]
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	bf0c      	ite	eq
 80066ec:	6032      	streq	r2, [r6, #0]
 80066ee:	605a      	strne	r2, [r3, #4]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xa0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7b2      	b.n	800665e <_malloc_r+0x32>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b9      	b.n	8006672 <_malloc_r+0x46>
 80066fe:	230c      	movs	r3, #12
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4638      	mov	r0, r7
 8006704:	f000 f84c 	bl	80067a0 <__malloc_unlock>
 8006708:	e7a1      	b.n	800664e <_malloc_r+0x22>
 800670a:	6025      	str	r5, [r4, #0]
 800670c:	e7de      	b.n	80066cc <_malloc_r+0xa0>
 800670e:	bf00      	nop
 8006710:	200002e0 	.word	0x200002e0

08006714 <_realloc_r>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4680      	mov	r8, r0
 800671a:	4614      	mov	r4, r2
 800671c:	460e      	mov	r6, r1
 800671e:	b921      	cbnz	r1, 800672a <_realloc_r+0x16>
 8006720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006724:	4611      	mov	r1, r2
 8006726:	f7ff bf81 	b.w	800662c <_malloc_r>
 800672a:	b92a      	cbnz	r2, 8006738 <_realloc_r+0x24>
 800672c:	f7ff ff12 	bl	8006554 <_free_r>
 8006730:	4625      	mov	r5, r4
 8006732:	4628      	mov	r0, r5
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	f000 f838 	bl	80067ac <_malloc_usable_size_r>
 800673c:	4284      	cmp	r4, r0
 800673e:	4607      	mov	r7, r0
 8006740:	d802      	bhi.n	8006748 <_realloc_r+0x34>
 8006742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006746:	d812      	bhi.n	800676e <_realloc_r+0x5a>
 8006748:	4621      	mov	r1, r4
 800674a:	4640      	mov	r0, r8
 800674c:	f7ff ff6e 	bl	800662c <_malloc_r>
 8006750:	4605      	mov	r5, r0
 8006752:	2800      	cmp	r0, #0
 8006754:	d0ed      	beq.n	8006732 <_realloc_r+0x1e>
 8006756:	42bc      	cmp	r4, r7
 8006758:	4622      	mov	r2, r4
 800675a:	4631      	mov	r1, r6
 800675c:	bf28      	it	cs
 800675e:	463a      	movcs	r2, r7
 8006760:	f7ff fed0 	bl	8006504 <memcpy>
 8006764:	4631      	mov	r1, r6
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fef4 	bl	8006554 <_free_r>
 800676c:	e7e1      	b.n	8006732 <_realloc_r+0x1e>
 800676e:	4635      	mov	r5, r6
 8006770:	e7df      	b.n	8006732 <_realloc_r+0x1e>
	...

08006774 <_sbrk_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_sbrk_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fb f928 	bl	80019d4 <_sbrk>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_sbrk_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_sbrk_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200002e8 	.word	0x200002e8

08006794 <__malloc_lock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_lock+0x8>)
 8006796:	f000 b811 	b.w	80067bc <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	200002ec 	.word	0x200002ec

080067a0 <__malloc_unlock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_unlock+0x8>)
 80067a2:	f000 b80c 	b.w	80067be <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	200002ec 	.word	0x200002ec

080067ac <_malloc_usable_size_r>:
 80067ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b0:	1f18      	subs	r0, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfbc      	itt	lt
 80067b6:	580b      	ldrlt	r3, [r1, r0]
 80067b8:	18c0      	addlt	r0, r0, r3
 80067ba:	4770      	bx	lr

080067bc <__retarget_lock_acquire_recursive>:
 80067bc:	4770      	bx	lr

080067be <__retarget_lock_release_recursive>:
 80067be:	4770      	bx	lr

080067c0 <_init>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr

080067cc <_fini>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr
